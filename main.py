import logging
import os
from typing import Dict, Optional, List, Tuple
import asyncio
import json
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –î–æ–¥–∞—î–º–æ fuzzy matching –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
try:
    from fuzzywuzzy import fuzz
    FUZZY_AVAILABLE = True
except ImportError:
    FUZZY_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning("fuzzywuzzy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Fuzzy matching –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')
ANALYTICS_SHEET_URL = os.getenv('ANALYTICS_SHEET_URL', GOOGLE_SHEET_URL)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
ENHANCED_SEARCH_CONFIG = {
    'enabled': True,  # –ì–æ–ª–æ–≤–Ω–∏–π –ø–µ—Ä–µ–º–∏–∫–∞—á
    'fuzzy_matching': True,  # Fuzzy matching
    'fuzzy_threshold': 80,  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π % —Å—Ö–æ–∂–æ—Å—Ç—ñ –¥–ª—è fuzzy match
    'regex_boundaries': True,  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è word boundaries
    'negation_detection': True,  # –î–µ—Ç–µ–∫—Ü—ñ—è –∑–∞–ø–µ—Ä–µ—á–µ–Ω—å
    'extended_synonyms': True,  # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏
    'fallback_to_old': True  # Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ —è–∫—â–æ –Ω–æ–≤–∞ –Ω–µ –∑–Ω–∞–π–¥–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
openai_client = None
user_states: Dict[int, str] = {}
user_last_recommendation: Dict[int, str] = {}
user_rating_data: Dict[int, Dict] = {}

class EnhancedRestaurantBot:
    def __init__(self):
        self.restaurants_data = []
        self.google_sheets_available = False
        self.analytics_sheet = None
        self.gc = None
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤
        self.extended_synonyms = {
            # –¢–∏–ø–∏ –∑–∞–∫–ª–∞–¥—ñ–≤
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—á–∏–∫', '—ó–¥–∞–ª—å–Ω—è', '–∑–∞–∫–ª–∞–¥'],
            '–∫–∞–≤\'—è—Ä–Ω—è': ['–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ', '–∫–∞–≤–∞', '–∫–∞–≤–∞—Ä–Ω—è', 'coffee', '–∫–æ—Ñ–µ'],
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü–∞', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª—ã', '—Å–∞—à—ñ–º—ñ'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            
            # –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞
            '—Ä–æ–º–∞–Ω—Ç–∏–∫': ['—Ä–æ–º–∞–Ω—Ç–∏–∫', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—ñ–Ω—Ç–∏–º–Ω–∏–π', '–∑–∞—Ç–∏—à–Ω–∏–π', '—Å–≤—ñ—á–∫–∏'],
            '—Å—ñ–º–µ–π–Ω–∏–π': ['—Å—ñ–º\'—è', '—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç–∏', '—Ä–æ–¥–∏–Ω–∞', '–¥–∏—Ç—è—á–∏–π', '–¥–ª—è –≤—Å—ñ—î—ó —Å—ñ–º\'—ó'],
            '–≤–µ—Å–µ–ª–∏–π': ['–≤–µ—Å–µ–ª', '–∂–≤–∞–≤–∏–π', '–µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π', '–≥—É—á–Ω–∏–π', '–¥—Ä–∞–π–≤–æ–≤–∏–π', '–º–æ–ª–æ–¥—ñ–∂–Ω–∏–π'],
            
            # –ö–æ–Ω—Ç–µ–∫—Å—Ç
            '—à–≤–∏–¥–∫–æ': ['—à–≤–∏–¥–∫–æ', '—à–≤–∏–¥–∫—É', '—à–≤–∏–¥–∫–∏–π', 'fast', '–ø–µ—Ä–µ–∫—É—Å', '–ø–æ—Å–ø—ñ—à–∞—é', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É'],
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ–¥–æ–º—É', '–Ω–µ —Ö–æ—á—É –π—Ç–∏', '–ø—Ä–∏–≤–µ–∑—Ç–∏', 'delivery']
        }
        
        # –°–ª–æ–≤–∞-–∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è
        self.negation_words = [
            '–Ω–µ', '–Ω—ñ', '–Ω—ñ–∫–æ–ª–∏', '–Ω—ñ–¥–µ', '–±–µ–∑', '–Ω–µ–º–∞', '–Ω–µ–º–∞—î', 
            '–Ω–µ —Ö–æ—á—É', '–Ω–µ –ª—é–±–ª—é', '–Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è', '–Ω–µ —Ç—Ä–µ–±–∞'
        ]
    
    def _convert_google_drive_url(self, url: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not url or 'drive.google.com' not in url:
            return url
        
        match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if match:
            file_id = match.group(1)
            direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
            logger.info(f"–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url} ‚Üí {direct_url}")
            return direct_url
        
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –∑ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
        return url
    
    async def init_google_sheets(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
        if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEET_URL:
            logger.error("Google Sheets credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
            
        try:
            scope = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive.readonly"
            ]
            
            credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
            
            self.gc = gspread.authorize(creds)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
            google_sheet = self.gc.open_by_url(GOOGLE_SHEET_URL)
            worksheet = google_sheet.sheet1
            
            records = worksheet.get_all_records()
            
            if records:
                self.restaurants_data = records
                self.google_sheets_available = True
                logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.restaurants_data)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ Google Sheets")
            else:
                logger.warning("Google Sheets –ø–æ—Ä–æ–∂–Ω—ñ–π")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É —Ç–∞–±–ª–∏—Ü—é
            await self.init_analytics_sheet()
                
        except Exception as e:
            logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Google Sheets: {type(e).__name__}: {str(e)}")
    
    async def init_analytics_sheet(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            analytics_sheet = self.gc.open_by_url(ANALYTICS_SHEET_URL)
            logger.info(f"üìä –í—ñ–¥–∫—Ä–∏—Ç–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è analytics: {ANALYTICS_SHEET_URL}")
            
            existing_sheets = [worksheet.title for worksheet in analytics_sheet.worksheets()]
            logger.info(f"üìã –Ü—Å–Ω—É—é—á—ñ –∞—Ä–∫—É—à—ñ: {existing_sheets}")
            
            try:
                self.analytics_sheet = analytics_sheet.worksheet("Analytics")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç Analytics")
                
                try:
                    headers = self.analytics_sheet.row_values(1)
                    if "Rating Explanation" not in headers:
                        logger.info("üîß –î–æ–¥–∞—é –∫–æ–ª–æ–Ω–∫—É Rating Explanation –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∞—Ä–∫—É—à–∞")
                        if "Rating" in headers:
                            rating_index = headers.index("Rating") + 1
                            self.analytics_sheet.insert_cols([[]], col=rating_index + 2)
                            self.analytics_sheet.update_cell(1, rating_index + 2, "Rating Explanation")
                        else:
                            next_col = len(headers) + 1
                            self.analytics_sheet.update_cell(1, next_col, "Rating Explanation")
                except Exception as header_error:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤: {header_error}")
                    
            except gspread.WorksheetNotFound:
                logger.info("üìÑ –ê—Ä–∫—É—à Analytics –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π...")
                
                self.analytics_sheet = analytics_sheet.add_worksheet(title="Analytics", rows="1000", cols="12")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç Analytics")
                
                headers = [
                    "Timestamp", "User ID", "User Request", "Restaurant Name", 
                    "Rating", "Rating Explanation", "Date", "Time"
                ]
                self.analytics_sheet.append_row(headers)
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ Analytics")
            
            try:
                self.summary_sheet = analytics_sheet.worksheet("Summary")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç Summary")
            except gspread.WorksheetNotFound:
                self.summary_sheet = analytics_sheet.add_worksheet(title="Summary", rows="100", cols="5")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç Summary")
                
                summary_data = [
                    ["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è", "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"],
                    ["–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
                ]
                
                for row in summary_data:
                    self.summary_sheet.append_row(row)
                    
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω–Ω—ñ –¥–æ Summary")
            
            logger.info("üß™ –¢–µ—Å—Ç—É—é –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É –¥–æ Analytics...")
            test_success = await self.test_analytics_write()
            if test_success:
                logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É –¥–æ Analytics —É—Å–ø—ñ—à–Ω–∏–π!")
            else:
                logger.error("‚ùå –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É –¥–æ Analytics –Ω–µ –≤–¥–∞–≤—Å—è!")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Analytics: {e}")
            self.analytics_sheet = None
    
    async def test_analytics_write(self):
        """–¢–µ—Å—Ç –∑–∞–ø–∏—Å—É –¥–æ Analytics –∞—Ä–∫—É—à–∞"""
        if not self.analytics_sheet:
            return False
        
        try:
            headers = self.analytics_sheet.row_values(1)
            logger.info(f"üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ Analytics: {headers}")
            
            test_row = [
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "TEST_USER",
                "TEST_REQUEST", 
                "TEST_RESTAURANT",
                "5",
                "Test explanation",
                datetime.now().strftime("%Y-%m-%d"),
                datetime.now().strftime("%H:%M:%S")
            ]
            
            self.analytics_sheet.append_row(test_row)
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
            
            all_values = self.analytics_sheet.get_all_values()
            if len(all_values) > 1:
                last_row = len(all_values)
                if "TEST_USER" in all_values[-1]:
                    self.analytics_sheet.delete_rows(last_row)
                    logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É –∑–∞–ø–∏—Å—É: {e}")
            return False

    def _comprehensive_content_analysis(self, user_request: str) -> Tuple[bool, List[Dict], str]:
        """
        –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –í–°–Ü–• –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ñ
        
        Returns:
            (–∑–Ω–∞–π–¥–µ–Ω–æ_—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ_–∑–∞–∫–ª–∞–¥–∏, —Å–ø–∏—Å–æ–∫_–∑–∞–∫–ª–∞–¥—ñ–≤_–∑_–æ—Ü—ñ–Ω–∫–∞–º–∏, –ø–æ—è—Å–Ω–µ–Ω–Ω—è)
        """
        user_lower = user_request.lower()
        logger.info(f"üîé –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: '{user_request}'")
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –ø–æ –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        search_criteria = {
            # üçµ –ù–∞–ø–æ—ó —Ç–∞ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ —Ä–µ—á—ñ
            '–º–∞—Ç—á–∞': {
                'keywords': ['–º–∞—Ç—á–∞', 'matcha', '–º–∞—Ç—á—ñ', '–º–∞—Ç—á—É'],
                'columns': ['menu', 'aim', 'vibe', 'cuisine', 'name'],
                'weight': 3.0
            },
            '–∫–∞–≤–∞': {
                'keywords': ['–∫–∞–≤–∞', '–∫–æ—Ñ–µ', 'coffee', '–∫–∞–ø—É—á—ñ–Ω–æ', '–ª–∞—Ç—Ç–µ', '–µ—Å–ø—Ä–µ—Å–æ', '–∞–º–µ—Ä–∏–∫–∞–Ω–æ'],
                'columns': ['menu', 'aim', 'cuisine', 'name', 'vibe'],
                'weight': 2.8
            },
            '—á–∞–π': {
                'keywords': ['—á–∞–π', 'tea', '—Ç—Ä–∞–≤—è–Ω–∏–π', '–∑–µ–ª–µ–Ω–∏–π —á–∞–π', '—á–æ—Ä–Ω–∏–π —á–∞–π'],
                'columns': ['menu', 'aim', 'cuisine', 'name'],
                'weight': 2.5
            },
            
            # üçΩÔ∏è –°—Ç—Ä–∞–≤–∏ —Ç–∞ –∫—É—Ö–Ω—è
            '–ø—ñ—Ü–∞': {
                'keywords': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–º–∞—Ä“ë–∞—Ä–∏—Ç–∞', '–ø–µ–ø–µ—Ä–æ–Ω—ñ'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 3.0
            },
            '—Å—É—à—ñ': {
                'keywords': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ', '—è–ø–æ–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è'],
                'columns': ['menu', 'cuisine', 'name', 'vibe'],
                'weight': 3.0
            },
            '–ø–∞—Å—Ç–∞': {
                'keywords': ['–ø–∞—Å—Ç–∞', 'pasta', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', '–∫–∞—Ä–±–æ–Ω–∞—Ä–∞', '–±–æ–ª–æ–Ω—å—î–∑–µ', '—ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞ –∫—É—Ö–Ω—è'],
                'columns': ['menu', 'cuisine', 'vibe', 'name'],
                'weight': 2.8
            },
            '–º—ñ–¥—ñ—ó': {
                'keywords': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ó', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 3.2
            },
            '—Å—Ç–µ–π–∫': {
                'keywords': ['—Å—Ç–µ–π–∫', 'steak', "–º'—è—Å–æ", '–±—ñ—Ñ—à—Ç–µ–∫—Å', '—Ñ—ñ–ª–µ'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 2.8
            },
            '–±—É—Ä–≥–µ—Ä': {
                'keywords': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 2.5
            },
            '—Å–∞–ª–∞—Ç': {
                'keywords': ['—Å–∞–ª–∞—Ç', 'salad', '—Å–≤—ñ–∂–∏–π', '–æ–≤–æ—á—ñ'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 2.0
            },
            '–¥–µ—Å–µ—Ä—Ç': {
                'keywords': ['–¥–µ—Å–µ—Ä—Ç', '—Ç–æ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–º–æ—Ä–æ–∑–∏–≤–æ', '—á—ñ–∑–∫–µ–π–∫', '—Å–æ–ª–æ–¥–∫–µ'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 2.2
            },
            
            # üè¢ –¢–∏–ø–∏ –∑–∞–∫–ª–∞–¥—ñ–≤
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
                'keywords': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—á–∏–∫', '—ó–¥–∞–ª—å–Ω—è', '–∑–∞–∫–ª–∞–¥'],
                'columns': ['type', '—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', 'aim', 'name'],
                'weight': 2.5
            },
            "–∫–∞–≤'—è—Ä–Ω—è": {
                'keywords': ["–∫–∞–≤'—è—Ä–Ω—è", '–∫–∞—Ñ–µ', 'coffee shop', '–∫–∞–≤–æ–≤–∞', '–∫–∞–≤–Ω—è'],
                'columns': ['type', '—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', 'aim', 'name'],
                'weight': 2.5
            },
            '–±–∞—Ä': {
                'keywords': ['–±–∞—Ä', '–ø–∞–±', '—Ç–∞–≤–µ—Ä–Ω–∞', '–≤–∏–ø–∏—Ç–∏', '–∞–ª–∫–æ–≥–æ–ª—å'],
                'columns': ['type', '—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', 'aim', 'vibe'],
                'weight': 2.3
            },
            
            # üíï –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Ç–∞ –Ω–∞—Å—Ç—Ä—ñ–π
            '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ': {
                'keywords': ['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—ñ–Ω—Ç–∏–º–Ω', '–∑–∞—Ç–∏—à–Ω', '—Å–≤—ñ—á–∫–∏', '–¥–ª—è –¥–≤–æ—Ö'],
                'columns': ['vibe', 'aim', 'name'],
                'weight': 2.8
            },
            '—Å—ñ–º–µ–π–Ω–æ': {
                'keywords': ['—Å—ñ–º\'—è', '—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç–∏', '—Ä–æ–¥–∏–Ω', '–¥–ª—è –≤—Å—ñ—î—ó —Å—ñ–º\'—ó'],
                'columns': ['vibe', 'aim', 'name'],
                'weight': 2.5
            },
            '–¥—Ä—É–∑—ñ': {
                'keywords': ['–¥—Ä—É–∑', '–∫–æ–º–ø–∞–Ω', '–≥—É—Ä—Ç–æ–º', '–≤–µ—Å–µ–ª–∏—Ç–∏—Å—è'],
                'columns': ['aim', 'vibe', 'name'],
                'weight': 2.3
            },
            '–≤–µ—Å–µ–ª–æ': {
                'keywords': ['–≤–µ—Å–µ–ª', '–∂–≤–∞–≤', '–µ–Ω–µ—Ä–≥—ñ–π–Ω', '–≥—É—á–Ω', '–¥—Ä–∞–π–≤', '–º–æ–ª–æ–¥—ñ–∂–Ω'],
                'columns': ['vibe', 'aim'],
                'weight': 2.0
            },
            '–∑–∞—Ç–∏—à–Ω–æ': {
                'keywords': ['–∑–∞—Ç–∏—à–Ω', '—Ç–∏—Ö', '—Å–ø–æ–∫—ñ–π–Ω', '—Ä–µ–ª–∞–∫—Å', '–¥–æ–º–∞—à–Ω'],
                'columns': ['vibe', 'aim'],
                'weight': 2.0
            },
            
            # üéØ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
            '–ø—Ä–∞—Ü—é–≤–∞—Ç–∏': {
                'keywords': ['–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', '–ø–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', '—Ä–æ–±–æ—Ç–∞', '–Ω–æ—É—Ç–±—É–∫', 'wifi', '—Ñ—Ä—ñ–ª–∞–Ω—Å'],
                'columns': ['aim', 'vibe'],
                'weight': 2.8
            },
            '–∑—É—Å—Ç—Ä—ñ—á': {
                'keywords': ['–∑—É—Å—Ç—Ä—ñ—á', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∏', '–±—ñ–∑–Ω–µ—Å', '–¥—ñ–ª–æ–≤', '–æ—Ñ—ñ—Ü—ñ–π–Ω'],
                'columns': ['aim', 'vibe'],
                'weight': 2.5
            },
            '—Å–Ω—ñ–¥–∞–Ω–æ–∫': {
                'keywords': ['—Å–Ω—ñ–¥–∞–Ω–æ–∫', '—Ä–∞–Ω–æ–∫', '–∑—Ä–∞–Ω–∫—É', 'morning'],
                'columns': ['aim', 'menu'],
                'weight': 2.3
            },
            '–æ–±—ñ–¥': {
                'keywords': ['–æ–±—ñ–¥', '–ø–æ–æ–±—ñ–¥–∞—Ç–∏', 'lunch'],
                'columns': ['aim'],
                'weight': 2.0
            },
            '–≤–µ—á–µ—Ä—è': {
                'keywords': ['–≤–µ—á–µ—Ä', '–ø–æ–≤–µ—á–µ—Ä—è—Ç–∏', 'dinner'],
                'columns': ['aim'],
                'weight': 2.0
            },
            '—Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è': {
                'keywords': ['—Å–≤—è—Ç–∫—É–≤', '–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂', '—é–≤—ñ–ª–µ–π', '—Å–≤—è—Ç–æ', '—Ç–æ—Ä–∂–µ—Å—Ç–≤'],
                'columns': ['aim', 'vibe'],
                'weight': 2.5
            },
            
            # üåç –ö—É—Ö–Ω—ñ —Å–≤—ñ—Ç—É
            '—ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏–π': {
                'keywords': ['—ñ—Ç–∞–ª', 'italian', '—ñ—Ç–∞–ª—ñ—è'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.5
            },
            '—è–ø–æ–Ω—Å—å–∫–∏–π': {
                'keywords': ['—è–ø–æ–Ω', 'japanese', '–∞–∑—ñ–π—Å—å–∫'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.5
            },
            '–≥—Ä—É–∑–∏–Ω—Å—å–∫–∏–π': {
                'keywords': ['–≥—Ä—É–∑–∏–Ω', 'georgian', '–∫–∞–≤–∫–∞–∑—å–∫', '—Ö–∞—á–∞–ø—É—Ä—ñ', '—Ö—ñ–Ω–∫–∞–ª—ñ'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.5
            },
            '—Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π': {
                'keywords': ['—Ñ—Ä–∞–Ω—Ü', 'french'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.3
            },
            '–∞–º–µ—Ä–∏–∫–∞–Ω—Å—å–∫–∏–π': {
                'keywords': ['–∞–º–µ—Ä–∏–∫', 'american', 'usa'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.0
            },
            '–º–µ–∫—Å–∏–∫–∞–Ω—Å—å–∫–∏–π': {
                'keywords': ['–º–µ–∫—Å–∏–∫', 'mexican', '–±—É—Ä—ñ—Ç–æ', '—Ç–∞–∫–æ'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.3
            },
            '—Ç—É—Ä–µ—Ü—å–∫–∏–π': {
                'keywords': ['—Ç—É—Ä–µ—Ü', 'turkish', '–∫–µ–±–∞–±', '–¥–æ–Ω–µ—Ä'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.3
            },
            
            # ‚ö° –ö–æ–Ω—Ç–µ–∫—Å—Ç —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            '—à–≤–∏–¥–∫–æ': {
                'keywords': ['—à–≤–∏–¥–∫–æ', '—à–≤–∏–¥–∫—É', '—à–≤–∏–¥–∫–∏–π', 'fast', '–ø–µ—Ä–µ–∫—É—Å', '–ø–æ—Å–ø—ñ—à–∞—é', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É'],
                'columns': ['aim', 'type', '—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É'],
                'weight': 2.5
            },
            '–¥–æ—Å—Ç–∞–≤–∫–∞': {
                'keywords': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ–¥–æ–º—É', '–∑–∞–º–æ–≤–∏—Ç–∏', '–ø—Ä–∏–≤–µ–∑—Ç–∏', 'delivery', '–Ω–µ —Ö–æ—á—É –π—Ç–∏', '–≤–¥–æ–º–∞'],
                'columns': ['type', '—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', 'aim'],
                'weight': 2.5
            },
            
            # üèôÔ∏è –õ–æ–∫–∞—Ü—ñ—è —Ç–∞ –æ—Ç–æ—á–µ–Ω–Ω—è
            '—Ü–µ–Ω—Ç—Ä': {
                'keywords': ['—Ü–µ–Ω—Ç—Ä', '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω', 'downtown'],
                'columns': ['address', 'name'],
                'weight': 1.8
            },
            '—Ç–µ—Ä–∞—Å–∞': {
                'keywords': ['—Ç–µ—Ä–∞—Å–∞', '–ª—ñ—Ç–Ω—è', '–≤–µ—Ä–∞–Ω–¥–∞', '–Ω–∞–¥–≤–æ—Ä—ñ', 'outdoor'],
                'columns': ['vibe', 'aim', 'menu'],
                'weight': 2.0
            },
            '–∫—Ä–∞—Å–∏–≤–∏–π_–≤–∏–¥': {
                'keywords': ['–≤–∏–¥', '–∫—Ä–∞—î–≤–∏–¥', '–ø–∞–Ω–æ—Ä–∞–º', 'view'],
                'columns': ['vibe', 'name'],
                'weight': 1.8
            }
        }
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–∫–ª–∞–¥
        restaurant_scores = []
        
        for restaurant in self.restaurants_data:
            total_score = 0.0
            matched_criteria = []
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –∫—Ä–∏—Ç–µ—Ä—ñ–π
            for criterion_name, criterion_data in search_criteria.items():
                keywords = criterion_data['keywords']
                columns = criterion_data['columns'] 
                weight = criterion_data['weight']
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø–∏—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_has_criterion = any(keyword in user_lower for keyword in keywords)
                
                if user_has_criterion:
                    # –®—É–∫–∞—î–º–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
                    restaurant_has_criterion = False
                    matched_columns = []
                    
                    for column in columns:
                        column_text = str(restaurant.get(column, '')).lower()
                        
                        if any(keyword in column_text for keyword in keywords):
                            restaurant_has_criterion = True
                            matched_columns.append(column)
                            logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î '{criterion_name}' –≤ –∫–æ–ª–æ–Ω—Ü—ñ '{column}': {column_text[:50]}...")
                        
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑ fuzzy matching
                        elif ENHANCED_SEARCH_CONFIG['fuzzy_matching'] and FUZZY_AVAILABLE:
                            for keyword in keywords:
                                if len(keyword) > 3:
                                    for word in column_text.split():
                                        if len(word) > 3:
                                            fuzzy_score = fuzz.ratio(keyword.lower(), word)
                                            if fuzzy_score >= 85:
                                                restaurant_has_criterion = True
                                                matched_columns.append(f"{column}(fuzzy)")
                                                logger.info(f"   üîç {restaurant.get('name', '')} –º–∞—î '{criterion_name}' —á–µ—Ä–µ–∑ fuzzy –≤ '{column}': {keyword}‚âà{word}")
                                                break
                                    if restaurant_has_criterion:
                                        break
                        
                        if restaurant_has_criterion:
                            break
                    
                    if restaurant_has_criterion:
                        # –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                        column_bonus = len(set(matched_columns)) * 0.2
                        final_score = weight + column_bonus
                        total_score += final_score
                        matched_criteria.append(f"{criterion_name}({','.join(matched_columns)})")
            
            if total_score > 0:
                restaurant_scores.append({
                    'restaurant': restaurant,
                    'score': total_score,
                    'criteria': matched_criteria
                })
                logger.info(f"üéØ {restaurant.get('name', '')}: –æ—Ü—ñ–Ω–∫–∞ {total_score:.1f} –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ {matched_criteria}")
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é
        restaurant_scores.sort(key=lambda x: x['score'], reverse=True)
        
        if restaurant_scores:
            # –ë–µ—Ä–µ–º–æ –∑–∞–∫–ª–∞–¥–∏ –∑ –Ω–∞–π–≤–∏—â–∏–º–∏ –æ—Ü—ñ–Ω–∫–∞–º–∏ (—Ç–æ–ø 70% –≤—ñ–¥ –Ω–∞–π–∫—Ä–∞—â–æ—ó –æ—Ü—ñ–Ω–∫–∏)
            top_score = restaurant_scores[0]['score']
            threshold = top_score * 0.7
            top_restaurants = [item for item in restaurant_scores if item['score'] >= threshold]
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
            explanation = f"–∑–Ω–∞–π–¥–µ–Ω–æ {len(top_restaurants)} –Ω–∞–π—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—à–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ (–æ—Ü—ñ–Ω–∫–∞ {threshold:.1f}+)"
            logger.info(f"üéâ –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: {explanation}")
            
            return True, top_restaurants, explanation
        else:
            logger.info("ü§î –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")
            return False, [], "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤"

    def _check_dish_availability(self, user_request: str) -> Tuple[bool, List[str]]:
        """
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å—Ç—Ä–∞–≤–∞ –≤ –º–µ–Ω—é —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
        
        Returns:
            (—î_—Å—Ç—Ä–∞–≤–∞_–≤_–º–µ–Ω—é, —Å–ø–∏—Å–æ–∫_–∑–Ω–∞–π–¥–µ–Ω–∏—Ö_—Å—Ç—Ä–∞–≤)
        """
        user_lower = user_request.lower()
        logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å—Ç—Ä–∞–≤ –≤ –∑–∞–ø–∏—Ç—ñ: '{user_request}'")
        
        # –†–æ–∑—à–∏—Ä–µ–Ω–∏–π —Å–ª–æ–≤–Ω–∏–∫ —Å—Ç—Ä–∞–≤ –∑ —Å–∏–Ω–æ–Ω—ñ–º–∞–º–∏
        food_keywords = {
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '–ø–∞—Å—Ç–∞': ['–ø–∞—Å—Ç–∞', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', 'pasta', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', '–º–∞–∫–∞—Ä–æ–Ω–∏'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '—Å–∞–ª–∞—Ç': ['—Å–∞–ª–∞—Ç', 'salad'],
            '—Ö—É–º—É—Å': ['—Ö—É–º—É—Å', 'hummus'],
            '—Ñ–∞–ª–∞—Ñ–µ–ª—å': ['—Ñ–∞–ª–∞—Ñ–µ–ª—å', 'falafel'],
            '—à–∞—É—Ä–º–∞': ['—à–∞—É—Ä–º', 'shawarma', '—à–∞–≤–µ—Ä–º–∞'],
            '—Å—Ç–µ–π–∫': ['—Å—Ç–µ–π–∫', 'steak', '–º\'—è—Å–æ', '–±—ñ—Ñ—à—Ç–µ–∫—Å'],
            '—Ä–∏–±–∞': ['—Ä–∏–±–∞', 'fish', '–ª–æ—Å–æ—Å—å', '—Å–µ–º–≥–∞', '—Ç—É–Ω–µ—Ü—å', '—Ñ–æ—Ä–µ–ª—å'],
            '–∫—É—Ä–∫–∞': ['–∫—É—Ä–∫', '–∫—É—Ä—á–∞—Ç', 'chicken', '–∫—É—Ä–∏—Ü–∞'],
            '–¥–µ—Å–µ—Ä—Ç': ['–¥–µ—Å–µ—Ä—Ç', '—Ç–æ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–º–æ—Ä–æ–∑–∏–≤–æ', '—á—ñ–∑–∫–µ–π–∫', '—Ç—ñ—Å—Ç–æ—á–∫–æ'],
            '–º—ñ–¥—ñ—ó': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ñ', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π'],
            '–∫—Ä–µ–≤–µ—Ç–∫–∏': ['–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–µ–≤–µ—Ç–∫–∞', 'shrimp', 'prawns'],
            '—É—Å—Ç—Ä–∏—Ü—ñ': ['—É—Å—Ç—Ä–∏—Ü—ñ', '—É—Å—Ç—Ä–∏—Ü–∞', 'oysters'],
            '–∫–∞–ª—å–º–∞—Ä–∏': ['–∫–∞–ª—å–º–∞—Ä–∏', '–∫–∞–ª—å–º–∞—Ä–∏', 'squid'],
            '—Ä–∞–≤—ñ–æ–ª—ñ': ['—Ä–∞–≤—ñ–æ–ª—ñ', 'ravioli', '—Ä–∞–≤–∏–æ–ª–∏'],
            '–ª–∞–∑–∞–Ω—å—è': ['–ª–∞–∑–∞–Ω—å—è', 'lasagna', '–ª–∞–∑–∞—ö–∞'],
            '—Ä—ñ–∑–æ—Ç—Ç–æ': ['—Ä—ñ–∑–æ—Ç—Ç–æ', 'risotto', '—Ä–∏–∑–æ—Ç—Ç–æ'],
            '–≥–Ω–æ–∫—ñ': ['–≥–Ω–æ–∫–∏', 'gnocchi', '–Ω—å–∫—ñ'],
            '—Ç–∞—Ä—Ç–∞—Ä': ['—Ç–∞—Ä—Ç–∞—Ä', 'tartar'],
            '–∫–∞—Ä–ø–∞—á–æ': ['–∫–∞—Ä–ø–∞—á–æ', 'carpaccio'],
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —è–∫—ñ —Å—Ç—Ä–∞–≤–∏ –∑–≥–∞–¥–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        requested_dishes = []
        for dish, keywords in food_keywords.items():
            match_found = False
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
            for keyword in keywords:
                if ENHANCED_SEARCH_CONFIG['enabled'] and ENHANCED_SEARCH_CONFIG['regex_boundaries']:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ word boundaries –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ –ø–æ—à—É–∫—É
                    pattern = r'\b' + re.escape(keyword.lower()) + r'\b'
                    if re.search(pattern, user_lower):
                        match_found = True
                        logger.info(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤—É '{dish}' —á–µ—Ä–µ–∑ keyword '{keyword}' (regex)")
                        break
                else:
                    # –ü—Ä–æ—Å—Ç–∏–π –ø–æ—à—É–∫ –ø—ñ–¥—Ä—è–¥–∫–∞
                    if keyword.lower() in user_lower:
                        match_found = True
                        logger.info(f"üéØ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤—É '{dish}' —á–µ—Ä–µ–∑ keyword '{keyword}' (substring)")
                        break
            
            # Fuzzy matching —è–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–π –º–µ—Ç–æ–¥
            if not match_found and ENHANCED_SEARCH_CONFIG['fuzzy_matching'] and FUZZY_AVAILABLE:
                user_words = user_lower.split()
                for user_word in user_words:
                    if len(user_word) > 3:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è —Å–ª—ñ–≤ –¥–æ–≤—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤
                        for keyword in keywords:
                            if len(keyword) > 3:
                                fuzzy_score = fuzz.ratio(keyword.lower(), user_word)
                                if fuzzy_score >= 85:  # –í–∏—Å–æ–∫–∏–π –ø–æ—Ä—ñ–≥ –¥–ª—è —Å—Ç—Ä–∞–≤
                                    match_found = True
                                    logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤—É '{dish}' —á–µ—Ä–µ–∑ fuzzy matching: '{keyword}' ‚âà '{user_word}' (score: {fuzzy_score})")
                                    break
                    if match_found:
                        break
            
            if match_found:
                requested_dishes.append(dish)
        
        if not requested_dishes:
            logger.info("ü§î –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –≤ –∑–∞–ø–∏—Ç—ñ")
            return False, []
        
        logger.info(f"üçΩÔ∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î —Å—Ç—Ä–∞–≤–∏: {requested_dishes}")
        
        # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
        dishes_found_in_restaurants = []
        
        for dish in requested_dishes:
            found_in_any_restaurant = False
            dish_keywords = food_keywords[dish]
            
            for restaurant in self.restaurants_data:
                menu_text = restaurant.get('menu', '').lower()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω —Å–∏–Ω–æ–Ω—ñ–º —Å—Ç—Ä–∞–≤–∏ –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
                for keyword in dish_keywords:
                    if ENHANCED_SEARCH_CONFIG['regex_boundaries']:
                        pattern = r'\b' + re.escape(keyword.lower()) + r'\b'
                        if re.search(pattern, menu_text):
                            found_in_any_restaurant = True
                            logger.info(f"‚úÖ –°—Ç—Ä–∞–≤—É '{dish}' –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é '{restaurant.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}'")
                            break
                    else:
                        if keyword.lower() in menu_text:
                            found_in_any_restaurant = True
                            logger.info(f"‚úÖ –°—Ç—Ä–∞–≤—É '{dish}' –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –º–µ–Ω—é '{restaurant.get('name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}'")
                            break
                
                if found_in_any_restaurant:
                    break
            
            if found_in_any_restaurant:
                dishes_found_in_restaurants.append(dish)
            else:
                logger.info(f"‚ùå –°—Ç—Ä–∞–≤—É '{dish}' –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∂–æ–¥–Ω–æ–º—É –º–µ–Ω—é")
        
        # –Ø–∫—â–æ —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —Å—Ç—Ä–∞–≤–∞ –∑–Ω–∞–π–¥–µ–Ω–∞ - –≤—Å–µ –û–ö
        if dishes_found_in_restaurants:
            logger.info(f"üéâ –ó–Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–∞–≤–∏ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö: {dishes_found_in_restaurants}")
            return True, dishes_found_in_restaurants
        else:
            logger.warning(f"üòû –ñ–æ–¥–Ω–∞ –∑ –∑–∞–ø–∏—Ç–∞–Ω–∏—Ö —Å—Ç—Ä–∞–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö: {requested_dishes}")
            return False, requested_dishes

    def _get_dish_keywords(self, dish: str) -> List[str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏"""
        food_keywords = {
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '–ø–∞—Å—Ç–∞': ['–ø–∞—Å—Ç–∞', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', 'pasta', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', '–º–∞–∫–∞—Ä–æ–Ω–∏'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '—Å–∞–ª–∞—Ç': ['—Å–∞–ª–∞—Ç', 'salad'],
            '—Ö—É–º—É—Å': ['—Ö—É–º—É—Å', 'hummus'],
            '—Ñ–∞–ª–∞—Ñ–µ–ª—å': ['—Ñ–∞–ª–∞—Ñ–µ–ª—å', 'falafel'],
            '—à–∞—É—Ä–º–∞': ['—à–∞—É—Ä–º', 'shawarma', '—à–∞–≤–µ—Ä–º–∞'],
            '—Å—Ç–µ–π–∫': ['—Å—Ç–µ–π–∫', 'steak', '–º\'—è—Å–æ', '–±—ñ—Ñ—à—Ç–µ–∫—Å'],
            '—Ä–∏–±–∞': ['—Ä–∏–±–∞', 'fish', '–ª–æ—Å–æ—Å—å', '—Å–µ–º–≥–∞', '—Ç—É–Ω–µ—Ü—å', '—Ñ–æ—Ä–µ–ª—å'],
            '–∫—É—Ä–∫–∞': ['–∫—É—Ä–∫', '–∫—É—Ä—á–∞—Ç', 'chicken', '–∫—É—Ä–∏—Ü–∞'],
            '–¥–µ—Å–µ—Ä—Ç': ['–¥–µ—Å–µ—Ä—Ç', '—Ç–æ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–º–æ—Ä–æ–∑–∏–≤–æ', '—á—ñ–∑–∫–µ–π–∫', '—Ç—ñ—Å—Ç–æ—á–∫–æ'],
            '–º—ñ–¥—ñ—ó': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ñ', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π'],
            '–∫—Ä–µ–≤–µ—Ç–∫–∏': ['–∫—Ä–µ–≤–µ—Ç–∫–∏', '–∫—Ä–µ–≤–µ—Ç–∫–∞', 'shrimp', 'prawns'],
            '—É—Å—Ç—Ä–∏—Ü—ñ': ['—É—Å—Ç—Ä–∏—Ü—ñ', '—É—Å—Ç—Ä–∏—Ü–∞', 'oysters'],
            '–∫–∞–ª—å–º–∞—Ä–∏': ['–∫–∞–ª—å–º–∞—Ä–∏', '–∫–∞–ª—å–º–∞—Ä–∏', 'squid'],
            '—Ä–∞–≤—ñ–æ–ª—ñ': ['—Ä–∞–≤—ñ–æ–ª—ñ', 'ravioli', '—Ä–∞–≤–∏–æ–ª–∏'],
            '–ª–∞–∑–∞–Ω—å—è': ['–ª–∞–∑–∞–Ω—å—è', 'lasagna', '–ª–∞–∑–∞—ö–∞'],
            '—Ä—ñ–∑–æ—Ç—Ç–æ': ['—Ä—ñ–∑–æ—Ç—Ç–æ', 'risotto', '—Ä–∏–∑–æ—Ç—Ç–æ'],
            '–≥–Ω–æ–∫—ñ': ['–≥–Ω–æ–∫–∏', 'gnocchi', '–Ω—å–∫—ñ'],
            '—Ç–∞—Ä—Ç–∞—Ä': ['—Ç–∞—Ä—Ç–∞—Ä', 'tartar'],
            '–∫–∞—Ä–ø–∞—á–æ': ['–∫–∞—Ä–ø–∞—á–æ', 'carpaccio'],
        }
        
        return food_keywords.get(dish, [dish])

    def _enhanced_keyword_match(self, user_text: str, keywords: List[str], context: str = "") -> Tuple[bool, float, List[str]]:
        """
        –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–æ—à—É–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
        
        Returns:
            (–∑–Ω–∞–π–¥–µ–Ω–æ, –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å, –∑–Ω–∞–π–¥–µ–Ω—ñ_—Å–ª–æ–≤–∞)
        """
        if not ENHANCED_SEARCH_CONFIG['enabled']:
            # Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏
            old_match = any(keyword in user_text.lower() for keyword in keywords)
            return old_match, 1.0 if old_match else 0.0, []
        
        user_lower = user_text.lower()
        found_keywords = []
        max_confidence = 0.0
        any_match = False
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è
        if ENHANCED_SEARCH_CONFIG['negation_detection']:
            if self._has_negation_near_keywords(user_text, keywords):
                logger.info(f"üö´ NEGATION: –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è –¥–ª—è {keywords[:3]}...")
                return False, 0.0, []
        
        for keyword in keywords:
            keyword_lower = keyword.lower()
            confidence = 0.0
            
            # 1. Exact match (–Ω–∞–π–≤–∏—â–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ—Å—Ç—å)
            if keyword_lower in user_lower:
                if ENHANCED_SEARCH_CONFIG['regex_boundaries']:
                    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ word boundaries —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ false positives
                    pattern = r'\b' + re.escape(keyword_lower) + r'\b'
                    if re.search(pattern, user_lower):
                        confidence = 1.0
                        any_match = True
                        found_keywords.append(keyword)
                        logger.info(f"‚úÖ EXACT: '{keyword}' –∑–Ω–∞–π–¥–µ–Ω–æ –∑ word boundaries")
                else:
                    confidence = 0.9  # –¢—Ä–æ—Ö–∏ –º–µ–Ω—à–µ –∑–∞ exact –∑ boundaries
                    any_match = True
                    found_keywords.append(keyword)
                    logger.info(f"‚úÖ SUBSTRING: '{keyword}' –∑–Ω–∞–π–¥–µ–Ω–æ (–±–µ–∑ boundaries)")
            
            # 2. Fuzzy matching –¥–ª—è –æ–ø–µ—á–∞—Ç–æ–∫
            elif ENHANCED_SEARCH_CONFIG['fuzzy_matching'] and FUZZY_AVAILABLE:
                # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Å–ª–æ–≤–∞ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–Ω–µ
                user_words = user_lower.split()
                for user_word in user_words:
                    if len(user_word) > 2 and len(keyword_lower) > 2:  # –¢—ñ–ª—å–∫–∏ –¥–ª—è —Å–ª—ñ–≤ –¥–æ–≤—à–µ 2 —Å–∏–º–≤–æ–ª—ñ–≤
                        fuzzy_score = fuzz.ratio(keyword_lower, user_word)
                        if fuzzy_score >= ENHANCED_SEARCH_CONFIG['fuzzy_threshold']:
                            confidence = max(confidence, fuzzy_score / 100.0 * 0.8)  # Fuzzy –º–µ–Ω—à –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π
                            any_match = True
                            found_keywords.append(f"{keyword}~{user_word}")
                            logger.info(f"üîç FUZZY: '{keyword}' ‚âà '{user_word}' (score: {fuzzy_score})")
            
            # 3. –°–∏–Ω–æ–Ω—ñ–º–∏
            if ENHANCED_SEARCH_CONFIG['extended_synonyms']:
                try:
                    synonym_match, synonym_confidence, synonym_words = self._check_synonyms(user_lower, keyword)
                    if synonym_match:
                        confidence = max(confidence, synonym_confidence * 0.7)  # –°–∏–Ω–æ–Ω—ñ–º–∏ —Ç—Ä–æ—Ö–∏ –º–µ–Ω—à –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ
                        any_match = True
                        found_keywords.extend([f"{keyword}‚Üí{sw}" for sw in synonym_words])
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤ –¥–ª—è '{keyword}': {e}")
            
            max_confidence = max(max_confidence, confidence)
        
        return any_match, max_confidence, found_keywords
    
    def _has_negation_near_keywords(self, user_text: str, keywords: List[str], window: int = 5) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è –ø–æ–±–ª–∏–∑—É –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤"""
        user_lower = user_text.lower()
        words = user_lower.split()
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–æ–∑–∏—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
        keyword_positions = []
        for i, word in enumerate(words):
            for keyword in keywords:
                if keyword.lower() in word or (FUZZY_AVAILABLE and fuzz.ratio(keyword.lower(), word) > 85):
                    keyword_positions.append(i)
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è –≤ –æ–∫–æ–ª–∏—Ü—ñ
        for pos in keyword_positions:
            start = max(0, pos - window)
            end = min(len(words), pos + window + 1)
            
            for i in range(start, end):
                if i != pos:  # –ù–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∞–º–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
                    word = words[i]
                    for negation in self.negation_words:
                        if negation in word or word in negation:
                            logger.info(f"üö´ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è '{negation}' –ø–æ–±–ª–∏–∑—É –ø–æ–∑–∏—Ü—ñ—ó {pos}")
                            return True
        
        return False
    
    def _check_synonyms(self, user_text: str, keyword: str) -> Tuple[bool, float, List[str]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —Å–∏–Ω–æ–Ω—ñ–º–∏ –¥–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞"""
        keyword_lower = keyword.lower()
        found_synonyms = []
        max_confidence = 0.0
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î keyword –≤ –Ω–∞—à–∏—Ö —Ä–æ–∑—à–∏—Ä–µ–Ω–∏—Ö —Å–∏–Ω–æ–Ω—ñ–º–∞—Ö
        for base_word, synonyms in self.extended_synonyms.items():
            if keyword_lower in [s.lower() for s in synonyms]:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤—Å—ñ —Å–∏–Ω–æ–Ω—ñ–º–∏ —Ü—ñ—î—ó –≥—Ä—É–ø–∏
                for synonym in synonyms:
                    if synonym.lower() in user_text:
                        found_synonyms.append(synonym)
                        max_confidence = max(max_confidence, 0.8)  # –í–∏—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤
                        logger.info(f"üìö SYNONYM: '{keyword}' ‚Üí '{synonym}'")
        
        return len(found_synonyms) > 0, max_confidence, found_synonyms

    def _enhanced_filter_by_establishment_type(self, user_request: str, restaurant_list):
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç–∏–ø–æ–º –∑–∞–∫–ª–∞–¥—É"""
        user_lower = user_request.lower()
        logger.info(f"üè¢ ENHANCED: –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç '{user_request}'")
        
        if not restaurant_list:
            return restaurant_list
        
        # –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ —Å–∏–Ω–æ–Ω—ñ–º–∞–º–∏
        enhanced_type_keywords = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
                'user_keywords': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—á–∏–∫', '–æ–±—ñ–¥', '–≤–µ—á–µ—Ä—è', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—Ä–æ–º–∞–Ω—Ç–∏–∫', '—Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è', '–±–∞–Ω–∫–µ—Ç', '–ø–æ—Å—ñ–¥—ñ—Ç–∏', '–ø–æ—ó—Å—Ç–∏', '–∑–∞–∫–ª–∞–¥'],
                'establishment_types': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω']
            },
            '–∫–∞–≤\'—è—Ä–Ω—è': {
                'user_keywords': ['–∫–∞–≤–∞', '–∫–∞–ø—É—á—ñ–Ω–æ', '–ª–∞—Ç—Ç–µ', '–µ—Å–ø—Ä–µ—Å–æ', '–∫–∞–≤\'—è—Ä–Ω—è', '–¥–µ—Å–µ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–∫—Ä—É–∞—Å–∞–Ω', '–≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏', '–∫–æ—Ñ–µ', '–∫–∞—Ñ–µ', 'coffee'],
                'establishment_types': ['–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ']
            },
            'to-go': {
                'user_keywords': ['—à–≤–∏–¥–∫–æ', '–Ω–∞ –≤–∏–Ω–æ—Å', '–ø–µ—Ä–µ–∫—É—Å', '–ø–æ—Å–ø—ñ—à–∞—é', 'to-go', 'takeaway', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É', '–ø–µ—Ä–µ—Ö–æ–ø–∏—Ç–∏'],
                'establishment_types': ['to-go', 'takeaway']
            },
            '–¥–æ—Å—Ç–∞–≤–∫–∞': {
                'user_keywords': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ–¥–æ–º—É', '–∑–∞–º–æ–≤–∏—Ç–∏', '–ø—Ä–∏–≤–µ–∑—Ç–∏', 'delivery', '–Ω–µ —Ö–æ—á—É –π—Ç–∏', '–≤–¥–æ–º–∞'],
                'establishment_types': ['–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery']
            }
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–º –ø–æ—à—É–∫–æ–º
        detected_types = []
        detection_details = []
        
        for establishment_type, keywords in enhanced_type_keywords.items():
            match_found, confidence, found_words = self._enhanced_keyword_match(
                user_request, 
                keywords['user_keywords'], 
                f"establishment_type_{establishment_type}"
            )
            
            if match_found:
                detected_types.extend(keywords['establishment_types'])
                detection_details.append({
                    'type': establishment_type,
                    'confidence': confidence,
                    'found_words': found_words
                })
                logger.info(f"üéØ ENHANCED: –í–∏—è–≤–ª–µ–Ω–æ —Ç–∏–ø '{establishment_type}' –∑ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é {confidence:.2f}")
        
        # –Ø–∫—â–æ —Ç–∏–ø –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
        if not detected_types:
            logger.info("üè¢ ENHANCED: –¢–∏–ø –∑–∞–∫–ª–∞–¥—É –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—é –≤—Å—ñ –∑–∞–∫–ª–∞–¥–∏")
            return restaurant_list
        
        logger.info(f"üè¢ ENHANCED: –®—É–∫–∞–Ω—ñ —Ç–∏–ø–∏ –∑–∞–∫–ª–∞–¥—ñ–≤: {detected_types}")
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ —Ç–∏–ø–æ–º –∑–∞–∫–ª–∞–¥—É
        filtered_restaurants = []
        for restaurant in restaurant_list:
            establishment_type = restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '')).lower().strip()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–±—ñ–≥ —Ç–∏–ø—É –∑–∞–∫–ª–∞–¥—É
            type_match = any(
                detected_type.lower().strip() in establishment_type or 
                establishment_type in detected_type.lower().strip() 
                for detected_type in detected_types
            )
            
            if type_match:
                filtered_restaurants.append(restaurant)
                logger.info(f"   ‚úÖ ENHANCED: {restaurant.get('name', '')}: —Ç–∏–ø '{establishment_type}' –ü–Ü–î–•–û–î–ò–¢–¨")
            else:
                logger.info(f"   ‚ùå ENHANCED: {restaurant.get('name', '')}: —Ç–∏–ø '{establishment_type}' –ù–ï –ü–Ü–î–•–û–î–ò–¢–¨")
        
        # Fallback –¥–æ —Å—Ç–∞—Ä–æ—ó –ª–æ–≥—ñ–∫–∏ —è–∫—â–æ –Ω–æ–≤–∞ –Ω–µ –∑–Ω–∞–π—à–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        if not filtered_restaurants and ENHANCED_SEARCH_CONFIG['fallback_to_old']:
            logger.warning("‚ö†Ô∏è ENHANCED: –ù–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ –Ω–µ –∑–Ω–∞–π—à–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, fallback –¥–æ —Å—Ç–∞—Ä–æ—ó")
            return self._filter_by_establishment_type(user_request, restaurant_list)
        
        if filtered_restaurants:
            logger.info(f"üè¢ ENHANCED: –£–°–ü–Ü–•! –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(filtered_restaurants)} –∑–∞–∫–ª–∞–¥—ñ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ —Ç–∏–ø—É –∑ {len(restaurant_list)}")
        else:
            logger.warning(f"üè¢ ENHANCED: –ü–†–û–ë–õ–ï–ú–ê! –ñ–æ–¥–µ–Ω –∑–∞–∫–ª–∞–¥ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∑–∞ —Ç–∏–ø–æ–º, –ø–æ–≤–µ—Ä—Ç–∞—é –≤—Å—ñ {len(restaurant_list)} –∑–∞–∫–ª–∞–¥–∏")
            return restaurant_list
        
        return filtered_restaurants
    
    # –°—Ç–∞—Ä—ñ –º–µ—Ç–æ–¥–∏ –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è fallback
    def _filter_by_establishment_type(self, user_request: str, restaurant_list):
        """–°–¢–ê–†–ê –õ–û–ì–Ü–ö–ê: –§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ —Ç–∏–ø–æ–º –∑–∞–∫–ª–∞–¥—É"""
        user_lower = user_request.lower()
        logger.info(f"üè¢ OLD: –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç '{user_request}'")
        
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É –∑ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        type_keywords = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
                'user_keywords': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–æ–±—ñ–¥', '–≤–µ—á–µ—Ä—è', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—Ä–æ–º–∞–Ω—Ç–∏–∫', '—Å–≤—è—Ç–∫—É–≤', '–±–∞–Ω–∫–µ—Ç', '–ø–æ—Å—ñ–¥—ñ—Ç–∏', '–ø–æ—ó—Å—Ç–∏'],
                'establishment_types': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω']
            },
            '–∫–∞–≤\'—è—Ä–Ω—è': {
                'user_keywords': ['–∫–∞–≤–∞', '–∫–∞–ø—É—á—ñ–Ω–æ', '–ª–∞—Ç—Ç–µ', '–µ—Å–ø—Ä–µ—Å–æ', '–∫–∞–≤\'—è—Ä–Ω—è', '–¥–µ—Å–µ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–∫—Ä—É–∞—Å–∞–Ω', '–≤–∏–ø–∏—Ç–∏ –∫–∞–≤–∏', '–∫–æ—Ñ–µ', '–∫–∞—Ñ–µ'],
                'establishment_types': ['–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ']
            },
            'to-go': {
                'user_keywords': ['—à–≤–∏–¥–∫–æ', '–Ω–∞ –≤–∏–Ω–æ—Å', '–ø–µ—Ä–µ–∫—É—Å', '–ø–æ—Å–ø—ñ—à–∞—é', 'to-go', 'takeaway', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É', '–ø–µ—Ä–µ—Ö–æ–ø–∏—Ç–∏'],
                'establishment_types': ['to-go', 'takeaway']
            },
            '–¥–æ—Å—Ç–∞–≤–∫–∞': {
                'user_keywords': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ–¥–æ–º—É', '–∑–∞–º–æ–≤–∏—Ç–∏', '–ø—Ä–∏–≤–µ–∑—Ç–∏', 'delivery', '–Ω–µ —Ö–æ—á—É –π—Ç–∏'],
                'establishment_types': ['–¥–æ—Å—Ç–∞–≤–∫–∞', 'delivery']
            }
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π —Ç–∏–ø –∑–∞–∫–ª–∞–¥—É
        detected_types = []
        for establishment_type, keywords in type_keywords.items():
            user_match = any(keyword in user_lower for keyword in keywords['user_keywords'])
            if user_match:
                detected_types.extend(keywords['establishment_types'])
                logger.info(f"üéØ OLD: –í–∏—è–≤–ª–µ–Ω–æ –∑–±—ñ–≥ '{establishment_type}'")
        
        # –Ø–∫—â–æ —Ç–∏–ø –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –Ω–µ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
        if not detected_types:
            logger.info("üè¢ OLD: –¢–∏–ø –∑–∞–∫–ª–∞–¥—É –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—é –≤—Å—ñ –∑–∞–∫–ª–∞–¥–∏")
            return restaurant_list
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ —Ç–∏–ø–æ–º –∑–∞–∫–ª–∞–¥—É
        filtered_restaurants = []
        for restaurant in restaurant_list:
            establishment_type = restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '')).lower().strip()
            type_match = any(detected_type.lower().strip() in establishment_type or establishment_type in detected_type.lower().strip() 
                           for detected_type in detected_types)
            
            if type_match:
                filtered_restaurants.append(restaurant)
        
        return filtered_restaurants if filtered_restaurants else restaurant_list

    def _filter_by_context(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø–∏—Ç—É"""
        user_lower = user_request.lower()
        logger.info(f"üéØ –ê–Ω–∞–ª—ñ–∑—É—é –∑–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{user_request}'")
        
        context_filters = {
            'romantic': {
                'user_keywords': ['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω', '–¥–≤–æ—Ö', '—ñ–Ω—Ç–∏–º–Ω', '–∑–∞—Ç–∏—à–Ω', '—Å–≤—ñ—á–∫–∏', '—Ä–æ–º–∞–Ω—Å'],
                'restaurant_keywords': ['—ñ–Ω—Ç–∏–º–Ω', '—Ä–æ–º–∞–Ω—Ç', '–¥–ª—è –ø–∞—Ä', '–∫–∞–º–µ—Ä–Ω', '–ø—Ä–∏–≤–∞—Ç']
            },
            'family': {
                'user_keywords': ['—Å—ñ–º', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω', '–±–∞—Ç—å–∫', '–º–∞–º', '–¥–∏—Ç–∏–Ω'],
                'restaurant_keywords': ['—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω', '–¥–ª—è –≤—Å—ñ—î—ó —Å—ñ–º']
            },
            'business': {
                'user_keywords': ['–¥—ñ–ª', '–∑—É—Å—Ç—Ä—ñ—á', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä', '–±—ñ–∑–Ω–µ—Å', '—Ä–æ–±–æ—á', '–æ—Ñ—ñ—Å'],
                'restaurant_keywords': ['–¥—ñ–ª', '–∑—É—Å—Ç—Ä—ñ—á', '–±—ñ–∑–Ω–µ—Å', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä', '–æ—Ñ—ñ—Ü']
            },
            'friends': {
                'user_keywords': ['–¥—Ä—É–∑', '–∫–æ–º–ø–∞–Ω', '–≥—É—Ä—Ç–æ–º', '–≤–µ—Å–µ–ª', '—Ç—É—Å–æ–≤–∫'],
                'restaurant_keywords': ['–∫–æ–º–ø–∞–Ω', '–¥—Ä—É–∑', '–º–æ–ª–æ–¥—ñ–∂–Ω', '–≤–µ—Å–µ–ª', '–≥—É—á–Ω']
            },
            'celebration': {
                'user_keywords': ['—Å–≤—è—Ç–∫—É–≤', '–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂', '—é–≤—ñ–ª–µ–π', '—Å–≤—è—Ç–æ', '—Ç–æ—Ä–∂–µ—Å—Ç–≤'],
                'restaurant_keywords': ['—Å–≤—è—Ç–∫–æ–≤', '–ø—Ä–æ—Å—Ç–æ—Ä', '–±–∞–Ω–∫–µ—Ç', '—Ç–æ—Ä–∂–µ—Å—Ç–≤', '–≥—Ä—É–ø']
            },
            'quick': {
                'user_keywords': ['—à–≤–∏–¥–∫', '–ø–µ—Ä–µ–∫—É—Å', '—Ñ–∞—Å—Ç', '–ø–æ—Å–ø—ñ—à–∞—é', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É'],
                'restaurant_keywords': ['—à–≤–∏–¥–∫', 'casual', '—Ñ–∞—Å—Ç', '–ø–µ—Ä–µ–∫—É—Å']
            }
        }
        
        detected_contexts = []
        for context, keywords in context_filters.items():
            user_match = any(keyword in user_lower for keyword in keywords['user_keywords'])
            if user_match:
                detected_contexts.append(context)
        
        if not detected_contexts:
            logger.info("üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—é –≤—Å—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
            return restaurant_list
        
        logger.info(f"üéØ –í–∏—è–≤–ª–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç(–∏): {detected_contexts}")
        
        filtered_restaurants = []
        for restaurant in restaurant_list:
            restaurant_text = f"{restaurant.get('vibe', '')} {restaurant.get('aim', '')} {restaurant.get('cuisine', '')} {restaurant.get('name', '')}".lower()
            
            restaurant_score = 0
            matched_contexts = []
            
            for context in detected_contexts:
                context_keywords = context_filters[context]['restaurant_keywords']
                if any(keyword in restaurant_text for keyword in context_keywords):
                    restaurant_score += 1
                    matched_contexts.append(context)
            
            if restaurant_score > 0:
                filtered_restaurants.append((restaurant_score, restaurant, matched_contexts))
                logger.info(f"   ‚úÖ {restaurant.get('name', '')}: –∑–±—ñ–≥ –ø–æ {matched_contexts}")
            else:
                logger.info(f"   ‚ùå {restaurant.get('name', '')}: –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        
        if filtered_restaurants:
            filtered_restaurants.sort(key=lambda x: x[0], reverse=True)
            result = [item[1] for item in filtered_restaurants]
            logger.info(f"üéØ –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ {len(result)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∑ {len(restaurant_list)}")
            return result
        else:
            logger.warning("‚ö†Ô∏è –ñ–æ–¥–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –ø–æ–≤–µ—Ä—Ç–∞—é –≤—Å—ñ")
            return restaurant_list

    def _filter_by_menu(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –ø–æ –º–µ–Ω—é"""
        user_lower = user_request.lower()
        
        food_keywords = {
            '–ø—ñ—Ü–∞': [' –ø—ñ—Ü', 'pizza', '–ø—ñ—Ü–∞'],
            '–ø–∞—Å—Ç–∞': [' –ø–∞—Å—Ç', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', 'pasta'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': [' —Å—É—à—ñ', 'sushi', ' —Ä–æ–ª', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '—Å–∞–ª–∞—Ç': [' —Å–∞–ª–∞—Ç', 'salad'],
            '—Ö—É–º—É—Å': ['—Ö—É–º—É—Å', 'hummus'],
            '—Ñ–∞–ª–∞—Ñ–µ–ª—å': ['—Ñ–∞–ª–∞—Ñ–µ–ª—å', 'falafel'],
            '—à–∞—É—Ä–º–∞': ['—à–∞—É—Ä–º', 'shawarma'],
            '—Å—Ç–µ–π–∫': ['—Å—Ç–µ–π–∫', 'steak', ' –º\'—è—Å–æ'],
            '—Ä–∏–±–∞': [' —Ä–∏–±', 'fish', '–ª–æ—Å–æ—Å—å'],
            '–∫—É—Ä–∫–∞': [' –∫—É—Ä–∫', '–∫—É—Ä—á–∞—Ç', 'chicken'],
            '–¥–µ—Å–µ—Ä—Ç': ['–¥–µ—Å–µ—Ä—Ç', '—Ç–æ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–º–æ—Ä–æ–∑–∏–≤–æ']
        }
        
        requested_dishes = []
        for dish, keywords in food_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                requested_dishes.append(dish)
        
        if requested_dishes:
            filtered_restaurants = []
            logger.info(f"üçΩ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏: {requested_dishes}")
            
            for restaurant in restaurant_list:
                menu_text = restaurant.get('menu', '').lower()
                has_requested_dish = False
                
                for dish in requested_dishes:
                    dish_keywords = food_keywords[dish]
                    if any(keyword in menu_text for keyword in dish_keywords):
                        has_requested_dish = True
                        logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î {dish}")
                        break
                
                if has_requested_dish:
                    filtered_restaurants.append(restaurant)
                else:
                    logger.info(f"   ‚ùå {restaurant.get('name', '')} –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç—Ä–∞–≤")
            
            if filtered_restaurants:
                logger.info(f"üìã –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ {len(filtered_restaurants)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏")
                return filtered_restaurants
            else:
                logger.warning("‚ö†Ô∏è –ñ–æ–¥–µ–Ω –∑–∞–∫–ª–∞–¥ –Ω–µ –º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç—Ä–∞–≤, –ø–æ–∫–∞–∑—É—é –≤—Å—ñ")
                return restaurant_list
        else:
            logger.info("üîç –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç, –∞–Ω–∞–ª—ñ–∑—É—é –≤—Å—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
            return restaurant_list

    async def get_recommendation(self, user_request: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ OpenAI –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ç–∏–ø—É –∑–∞–∫–ª–∞–¥—É, –∫–æ–Ω—Ç–µ–∫—Å—Ç—É —Ç–∞ –º–µ–Ω—é"""
        try:
            global openai_client
            if openai_client is None:
                import openai
                openai.api_key = OPENAI_API_KEY
                openai_client = openai
                logger.info("‚úÖ OpenAI –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            if not self.restaurants_data:
                logger.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
                return None
            
            import random
            shuffled_restaurants = self.restaurants_data.copy()
            random.shuffle(shuffled_restaurants)
            
            logger.info(f"üé≤ –ü–µ—Ä–µ–º—ñ—à–∞–≤ –ø–æ—Ä—è–¥–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ")
            
            # üîé –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó –ü–û –í–°–Ü–• –ö–û–õ–û–ù–ö–ê–•
            has_specific_criteria, relevant_restaurants, analysis_explanation = self._comprehensive_content_analysis(user_request)
            
            if has_specific_criteria:
                # –ó–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –∑–∞–∫–ª–∞–¥–∏
                logger.info(f"üéØ –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: {analysis_explanation}")
                shuffled_restaurants = [item['restaurant'] for item in relevant_restaurants]
                logger.info(f"üìä –í—ñ–¥—ñ–±—Ä–∞–Ω–æ {len(shuffled_restaurants)} –Ω–∞–π—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—à–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤")
            else:
                # –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤ - –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–∞–ø–∏—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É
                logger.info("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤, –ø–µ—Ä–µ–≤—ñ—Ä—è—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏...")
                
                has_dish, dishes_info = self._check_dish_availability(user_request)
                
                # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏
                if dishes_info:  # –Ø–∫—â–æ –±—É–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –∑–∞–ø–∏—Ç—ñ
                    if not has_dish:  # –ê–ª–µ —ó—Ö –Ω–µ–º–∞—î –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
                        missing_dishes = ", ".join(dishes_info)
                        logger.warning(f"‚ùå –í–Ü–î–°–£–¢–ù–Ø –°–¢–†–ê–í–ê: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞–≤ '{missing_dishes}', –∞–ª–µ —ó—ó –Ω–µ–º–∞—î –≤ –∂–æ–¥–Ω–æ–º—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ")
                        
                        return {
                            "dish_not_found": True,
                            "missing_dishes": missing_dishes,
                            "message": f"–ù–∞ –∂–∞–ª—å, {missing_dishes} —â–µ –Ω–µ–º–∞—î –≤ –Ω–∞—à–æ–º—É –ø–µ—Ä–µ–ª—ñ–∫—É. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É —Å—Ç—Ä–∞–≤—É!"
                        }
                    else:  # –°—Ç—Ä–∞–≤–∏ —î - —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑ —Ü–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏
                        logger.info(f"üéØ –§–û–ö–£–° –ù–ê –°–¢–†–ê–í–ê–•: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞–≤ '{dishes_info}' - —Ñ—ñ–ª—å—Ç—Ä—É—é —Ç—ñ–ª—å–∫–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑ —Ü–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏")
                        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ shuffled_restaurants –¥–æ —Ç—ñ–ª—å–∫–∏ —Ç–∏—Ö, —â–æ –º–∞—é—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç—Ä–∞–≤–∏
                        dish_filtered_restaurants = []
                        for restaurant in shuffled_restaurants:
                            menu_text = restaurant.get('menu', '').lower()
                            has_required_dish = False
                            
                            for dish in dishes_info:
                                dish_keywords = self._get_dish_keywords(dish)
                                for keyword in dish_keywords:
                                    if ENHANCED_SEARCH_CONFIG['regex_boundaries']:
                                        pattern = r'\b' + re.escape(keyword.lower()) + r'\b'
                                        if re.search(pattern, menu_text):
                                            has_required_dish = True
                                            logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î {dish}")
                                            break
                                    else:
                                        if keyword.lower() in menu_text:
                                            has_required_dish = True
                                            logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î {dish}")
                                            break
                                if has_required_dish:
                                    break
                            
                            if has_required_dish:
                                dish_filtered_restaurants.append(restaurant)
                        
                        if not dish_filtered_restaurants:
                            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê: —Ñ—É–Ω–∫—Ü—ñ—è —Å–∫–∞–∑–∞–ª–∞ —â–æ —Å—Ç—Ä–∞–≤–∏ —î, –∞–ª–µ —Ñ—ñ–ª—å—Ç—Ä –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤")
                            return {
                                "dish_not_found": True,
                                "missing_dishes": ", ".join(dishes_info),
                                "message": f"–ù–∞ –∂–∞–ª—å, {', '.join(dishes_info)} —â–µ –Ω–µ–º–∞—î –≤ –Ω–∞—à–æ–º—É –ø–µ—Ä–µ–ª—ñ–∫—É. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É —Å—Ç—Ä–∞–≤—É!"
                            }
                        
                        logger.info(f"üçΩÔ∏è –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ {len(dish_filtered_restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏ –∑ {len(shuffled_restaurants)}")
                        shuffled_restaurants = dish_filtered_restaurants
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∞–¥—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –∞–Ω–∞–ª—ñ–∑—É
            if has_specific_criteria:
                # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –≤–∂–µ –≤—ñ–¥—ñ–±—Ä–∞–≤ –Ω–∞–π–∫—Ä–∞—â—ñ –∑–∞–∫–ª–∞–¥–∏
                final_filtered = shuffled_restaurants
                logger.info(f"üéØ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é {len(final_filtered)} –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤")
            else:
                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ç—Ä—å–æ—Ö–µ—Ç–∞–ø–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤
                logger.info("üìã –°–¢–ê–ù–î–ê–†–¢–ù–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø: –∑–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")
                
                # 1. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –¢–ò–ü–û–ú –ó–ê–ö–õ–ê–î–£ (–ø–æ–∫—Ä–∞—â–µ–Ω–æ!)
                if ENHANCED_SEARCH_CONFIG['enabled']:
                    type_filtered = self._enhanced_filter_by_establishment_type(user_request, shuffled_restaurants)
                else:
                    type_filtered = self._filter_by_establishment_type(user_request, shuffled_restaurants)
                
                # 2. –ü–æ—Ç—ñ–º —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ö–û–ù–¢–ï–ö–°–¢–û–ú
                context_filtered = self._filter_by_context(user_request, type_filtered)
                
                # 3. –ù–∞–µ—à—Ç—ñ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –ú–ï–ù–Æ (—è–∫—â–æ –Ω–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ)
                final_filtered = self._filter_by_menu(user_request, context_filtered)
            
            restaurants_details = []
            for i, r in enumerate(final_filtered):
                establishment_type = r.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', r.get('type', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
                detail = f"""–í–∞—Ä—ñ–∞–Ω—Ç {i+1}:
- –ù–∞–∑–≤–∞: {r.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}
- –¢–∏–ø: {establishment_type}
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {r.get('vibe', '–ù–µ –æ–ø–∏—Å–∞–Ω–∞')}
- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {r.get('aim', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
- –ö—É—Ö–Ω—è: {r.get('cuisine', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}"""
                restaurants_details.append(detail)
            
            restaurants_text = "\n\n".join(restaurants_details)
            
            prompt = f"""–ó–ê–ü–ò–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê: "{user_request}"

–í–ê–ñ–õ–ò–í–û: –í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –Ω–∏–∂—á–µ –ø—Ä–æ–π—à–ª–∏ –ß–û–¢–ò–†–¨–û–•–ï–¢–ê–ü–ù–£ –§–Ü–õ–¨–¢–†–ê–¶–Ü–Æ —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –∑–∞–ø–∏—Ç.

{restaurants_text}

–ó–ê–í–î–ê–ù–ù–Ø:
1. –û–±–µ—Ä–∏ 2 –ù–ê–ô–ö–†–ê–©–Ü –≤–∞—Ä—ñ–∞–Ω—Ç–∏ (—è–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ 1 –≤–∞—Ä—ñ–∞–Ω—Ç, —Ç–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ)
2. –í–∫–∞–∂–∏ —è–∫–∏–π –∑ –Ω–∏—Ö —î –ü–†–Ü–û–†–ò–¢–ï–¢–ù–ò–ú —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏ –ß–û–ú–£

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
–í–∞—Ä—ñ–∞–Ω—Ç–∏: [–Ω–æ–º–µ—Ä1, –Ω–æ–º–µ—Ä2]
–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: [–Ω–æ–º–µ—Ä] - [–∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏]

–ü–†–ò–ö–õ–ê–î:
–í–∞—Ä—ñ–∞–Ω—Ç–∏: [1, 3]
–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: 1 - —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –∑–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ—é —Ç–∞ —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è–º

–¢–í–û–Ø –í–Ü–î–ü–û–í–Ü–î–¨:"""

            logger.info(f"ü§ñ –ó–∞–ø–∏—Ç—É—é —É OpenAI 2 –Ω–∞–π–∫—Ä–∞—â—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –∑ {len(final_filtered)} –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö...")
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—ñ –≤—Å—ñ—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            for i, r in enumerate(final_filtered):
                logger.info(f"   {i+1}. {r.get('name', '')} ({r.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', r.get('type', ''))} | {r.get('vibe', '')} | {r.get('aim', '')})")

            def make_openai_request():
                return openai_client.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-—Ä–µ—Å—Ç–æ—Ä–∞—Ç–æ—Ä. –ê–Ω–∞–ª—ñ–∑—É–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ç–∞ –æ–±–∏—Ä–∞–π –Ω–∞–π–∫—Ä–∞—â—ñ –∑ –æ–±'—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=200,
                    temperature=0.3,
                    top_p=0.9
                )
            
            response = await asyncio.wait_for(
                asyncio.to_thread(make_openai_request),
                timeout=20
            )
            
            choice_text = response.choices[0].message.content.strip()
            logger.info(f"ü§ñ OpenAI –ø–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{choice_text}'")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI
            recommendations = self._parse_dual_recommendation(choice_text, final_filtered)
            
            if recommendations:
                return recommendations
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø–∞—Ä—Å–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                return self._fallback_dual_selection(user_request, final_filtered)
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ Timeout –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            return self._fallback_dual_selection(user_request, self.restaurants_data)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {e}")
            return self._fallback_dual_selection(user_request, self.restaurants_data)

    def _parse_dual_recommendation(self, openai_response: str, filtered_restaurants):
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI –∑ –¥–≤–æ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
        try:
            lines = openai_response.strip().split('\n')
            variants_line = ""
            priority_line = ""
            
            for line in lines:
                line = line.strip()
                if line.lower().startswith('–≤–∞—Ä—ñ–∞–Ω—Ç') and '[' in line:
                    variants_line = line
                elif line.lower().startswith('–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç') and '-' in line:
                    priority_line = line
            
            logger.info(f"üîç –ü–∞—Ä—Å–∏–Ω–≥ - –í–∞—Ä—ñ–∞–Ω—Ç–∏: '{variants_line}', –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: '{priority_line}'")
            
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
            import re
            numbers = re.findall(r'\d+', variants_line)
            
            if len(numbers) >= 1:
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —ñ–Ω–¥–µ–∫—Å–∏ (–º—ñ–Ω—É—Å 1)
                indices = [int(num) - 1 for num in numbers[:2]]  # –ë–µ—Ä–µ–º–æ –º–∞–∫—Å–∏–º—É–º 2
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —ñ–Ω–¥–µ–∫—Å–∏ –≤ –º–µ–∂–∞—Ö
                valid_indices = [idx for idx in indices if 0 <= idx < len(filtered_restaurants)]
                
                if not valid_indices:
                    logger.warning("‚ö†Ô∏è –í—Å—ñ —ñ–Ω–¥–µ–∫—Å–∏ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏")
                    return None
                
                restaurants = [filtered_restaurants[idx] for idx in valid_indices]
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                priority_num = None
                priority_explanation = "–Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞ –≤—Å—ñ–º–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏"
                
                if priority_line and '-' in priority_line:
                    # –®—É–∫–∞—î–º–æ –Ω–æ–º–µ—Ä –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç—É
                    priority_match = re.search(r'(\d+)', priority_line.split('-')[0])
                    if priority_match:
                        priority_num = int(priority_match.group(1))
                    
                    # –í–∏—Ç—è–≥—É—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è
                    explanation_part = priority_line.split('-', 1)[1].strip()
                    if explanation_part:
                        priority_explanation = explanation_part
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π
                if priority_num and (priority_num - 1) in valid_indices:
                    priority_index = valid_indices.index(priority_num - 1)
                else:
                    priority_index = 0  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–µ—Ä—à–∏–π
                
                logger.info(f"‚úÖ –†–æ–∑–ø–∞—Ä—Å–µ–Ω–æ: {len(restaurants)} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤, –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: {priority_index + 1}")
                
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑ –¥–≤–æ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
                result = {
                    "restaurants": [],
                    "priority_index": priority_index,
                    "priority_explanation": priority_explanation
                }
                
                for restaurant in restaurants:
                    photo_url = restaurant.get('photo', '')
                    if photo_url:
                        photo_url = self._convert_google_drive_url(photo_url)
                    
                    result["restaurants"].append({
                        "name": restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                        "address": restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                        "socials": restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                        "vibe": restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                        "aim": restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                        "cuisine": restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                        "menu": restaurant.get('menu', ''),
                        "menu_url": restaurant.get('menu_url', ''),
                        "photo": photo_url,
                        "type": restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–ó–∞–∫–ª–∞–¥'))
                    })
                
                return result
            
            logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä—ñ–≤ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OpenAI")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OpenAI: {e}")
            return None

    def _fallback_dual_selection(self, user_request: str, restaurant_list):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –¥–≤–æ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        if not restaurant_list:
            return None
        
        import random
        
        # –Ø–∫—â–æ —Ç—ñ–ª—å–∫–∏ –æ–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω
        if len(restaurant_list) == 1:
            chosen = restaurant_list[0]
            photo_url = chosen.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
                
            return {
                "restaurants": [{
                    "name": chosen.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                    "address": chosen.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                    "socials": chosen.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                    "vibe": chosen.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                    "aim": chosen.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                    "cuisine": chosen.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                    "menu": chosen.get('menu', ''),
                    "menu_url": chosen.get('menu_url', ''),
                    "photo": photo_url,
                    "type": chosen.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', chosen.get('type', '–ó–∞–∫–ª–∞–¥'))
                }],
                "priority_index": 0,
                "priority_explanation": "—î–¥–∏–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"
            }
        
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –≤–∏–±–æ—Ä—É 2 –Ω–∞–π–∫—Ä–∞—â–∏—Ö
        scored_restaurants = []
        user_lower = user_request.lower()
        
        keywords_map = {
            'romantic': (['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω', '—ñ–Ω—Ç–∏–º–Ω'], ['—ñ–Ω—Ç–∏–º–Ω', '—Ä–æ–º–∞–Ω—Ç', '–ø–∞—Ä']),
            'family': (['—Å—ñ–º', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω'], ['—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω']),
            'business': (['–¥—ñ–ª', '–∑—É—Å—Ç—Ä—ñ—á', '–±—ñ–∑–Ω–µ—Å'], ['–¥—ñ–ª', '–±—ñ–∑–Ω–µ—Å']),
            'friends': (['–¥—Ä—É–∑', '–∫–æ–º–ø–∞–Ω', '–≤–µ—Å–µ–ª'], ['–∫–æ–º–ø–∞–Ω', '–¥—Ä—É–∑', '–º–æ–ª–æ–¥—ñ–∂–Ω'])
        }
        
        for restaurant in restaurant_list:
            score = 0
            restaurant_text = f"{restaurant.get('vibe', '')} {restaurant.get('aim', '')}".lower()
            
            for category, (user_keywords, restaurant_keywords) in keywords_map.items():
                user_match = any(keyword in user_lower for keyword in user_keywords)
                if user_match:
                    restaurant_match = any(keyword in restaurant_text for keyword in restaurant_keywords)
                    if restaurant_match:
                        score += 3
            
            score += random.uniform(0, 1)  # –ù–µ–≤–µ–ª–∏–∫–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±–æ–Ω—É—Å
            scored_restaurants.append((score, restaurant))
        
        # –°–æ—Ä—Ç—É—î–º–æ —Ç–∞ –±–µ—Ä–µ–º–æ —Ç–æ–ø-2
        scored_restaurants.sort(key=lambda x: x[0], reverse=True)
        top_restaurants = [item[1] for item in scored_restaurants[:2]]
        
        # –§–æ—Ä–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = {
            "restaurants": [],
            "priority_index": 0,
            "priority_explanation": "–Ω–∞–π–≤–∏—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"
        }
        
        for restaurant in top_restaurants:
            photo_url = restaurant.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
            
            result["restaurants"].append({
                "name": restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                "address": restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                "socials": restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                "vibe": restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                "aim": restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                "cuisine": restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                "menu": restaurant.get('menu', ''),
                "menu_url": restaurant.get('menu_url', ''),
                "photo": photo_url,
                "type": restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–ó–∞–∫–ª–∞–¥'))
            })
        
        logger.info(f"üéØ –†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: –æ–±—Ä–∞–Ω–æ {len(result['restaurants'])} —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤")
        return result

    async def log_request(self, user_id: int, user_request: str, restaurant_name: str, rating: Optional[int] = None, explanation: str = ""):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        if not self.analytics_sheet:
            logger.warning("Analytics sheet –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return
            
        try:
            now = datetime.now()
            timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
            date = now.strftime("%Y-%m-%d")
            time = now.strftime("%H:%M:%S")
            
            row_data = [
                timestamp,
                str(user_id),
                user_request,
                restaurant_name,
                str(rating) if rating else "",
                explanation,
                date,
                time
            ]
            
            self.analytics_sheet.append_row(row_data)
            logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ –¥–æ Analytics: {user_id} - {restaurant_name} - –û—Ü—ñ–Ω–∫–∞: {rating} - –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation[:50]}...")
            
            await self.update_summary_stats()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")
    
    async def update_summary_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.analytics_sheet or not self.summary_sheet:
            return
            
        try:
            all_records = self.analytics_sheet.get_all_records()
            
            if not all_records:
                return
            
            total_requests = len(all_records)
            unique_users = len(set(record['User ID'] for record in all_records))
            
            ratings = [int(record['Rating']) for record in all_records if record['Rating'] and str(record['Rating']).isdigit()]
            avg_rating = sum(ratings) / len(ratings) if ratings else 0
            rating_count = len(ratings)
            
            avg_requests_per_user = total_requests / unique_users if unique_users > 0 else 0
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            self.summary_sheet.update('B2', str(total_requests))
            self.summary_sheet.update('C2', timestamp)
            
            self.summary_sheet.update('B3', str(unique_users))
            self.summary_sheet.update('C3', timestamp)
            
            self.summary_sheet.update('B4', f"{avg_rating:.2f}")
            self.summary_sheet.update('C4', timestamp)
            
            self.summary_sheet.update('B5', str(rating_count))
            self.summary_sheet.update('C5', timestamp)
            
            try:
                self.summary_sheet.update('A6', "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                self.summary_sheet.update('B6', f"{avg_requests_per_user:.2f}")
                self.summary_sheet.update('C6', timestamp)
            except:
                self.summary_sheet.append_row(["–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", f"{avg_requests_per_user:.2f}", timestamp])
            
            logger.info(f"üìà –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –ó–∞–ø–∏—Ç—ñ–≤: {total_requests}, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {unique_users}, –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: {avg_rating:.2f}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –±–æ—Ç–∞
restaurant_bot = EnhancedRestaurantBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_request"
    
    message = """üçΩ <b>–í—ñ—Ç–∞—é –≤ Restaurant Bot!</b>

–Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó!

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ:</b>
‚Ä¢ "–†–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è"
‚Ä¢ "–ö–∞–≤'—è—Ä–Ω—è –¥–µ –º–æ–∂–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏"  
‚Ä¢ "–ü—ñ—Ü–∞ –∑ –¥—Ä—É–∑—è–º–∏"
‚Ä¢ "–î–µ –≤–∏–ø–∏—Ç–∏ –º–∞—Ç—á—É?"

<b>–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/help - –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
/list_restaurants - –í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –∑–∞ —Ç–∏–ø–∞–º–∏

<b>–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏?</b> –û–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ! ‚ú®"""
    
    await update.message.reply_text(message, parse_mode='HTML')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞"""
    help_text = """ü§ñ <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ Restaurant Bot</b>

<b>üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é!

<b>üîç –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ "–•–æ—á—É –ø—ñ—Ü—É –∑ –¥—Ä—É–∑—è–º–∏"
‚Ä¢ "–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è"
‚Ä¢ "–î–µ –º–æ–∂–Ω–∞ –≤–∏–ø–∏—Ç–∏ –º–∞—Ç—á—É?"
‚Ä¢ "–°—ñ–º–µ–π–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –æ–±—ñ–¥—É"
‚Ä¢ "–®–≤–∏–¥–∫–æ –ø–µ—Ä–µ–∫—É—Å–∏—Ç–∏"
‚Ä¢ "–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ –∫—É—Ö–Ω—è –≤ —Ü–µ–Ω—Ç—Ä—ñ"

<b>üîé –©–æ –±–æ—Ç —Ä–æ–∑—É–º—ñ—î:</b>
‚Ä¢ <i>–°—Ç—Ä–∞–≤–∏:</i> –ø—ñ—Ü–∞, —Å—É—à—ñ, –ø–∞—Å—Ç–∞, –º—ñ–¥—ñ—ó, —Å—Ç–µ–π–∫ —Ç–∞ —ñ–Ω.
‚Ä¢ <i>–ê—Ç–º–æ—Å—Ñ–µ—Ä—É:</i> —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ, —Å—ñ–º–µ–π–Ω–æ, –≤–µ—Å–µ–ª–æ, –∑–∞—Ç–∏—à–Ω–æ
‚Ä¢ <i>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</i> –ø–æ–±–∞—á–µ–Ω–Ω—è, –¥—Ä—É–∑—ñ, —Ä–æ–±–æ—Ç–∞, —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ <i>–¢–∏–ø–∏:</i> —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∞–≤'—è—Ä–Ω—è, –¥–æ—Å—Ç–∞–≤–∫–∞, to-go
‚Ä¢ <i>–ö—É—Ö–Ω—é:</i> —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞, —è–ø–æ–Ω—Å—å–∫–∞, –≥—Ä—É–∑–∏–Ω—Å—å–∫–∞ —Ç–∞ —ñ–Ω.

<b>‚≠ê –û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:</b>
–ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –æ—Ü—ñ–Ω—ñ—Ç—å —ó—ó –≤—ñ–¥ 1 –¥–æ 10
–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó!

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/list_restaurants - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)

<b>üí° –ü–æ—Ä–∞–¥–∏:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏: "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
‚Ä¢ –í–∫–∞–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: "–∑ –¥—ñ—Ç—å–º–∏", "–¥–ª—è —Ä–æ–±–æ—Ç–∏"  
‚Ä¢ –ó–≥–∞–¥—É–π—Ç–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è: "–∑ —Ç–µ—Ä–∞—Å–æ—é", "–≤ —Ü–µ–Ω—Ç—Ä—ñ"

–ì–æ—Ç–æ–≤—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ? –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç! üçΩÔ∏è"""

    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.info(f"üìñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ–≤—ñ–¥–∫—É")

async def list_restaurants_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /list_restaurants - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–π –∑–∞ —Ç–∏–ø–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not restaurant_bot.restaurants_data:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
    grouped_restaurants = {}
    for restaurant in restaurant_bot.restaurants_data:
        establishment_type = restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–Ü–Ω—à–µ'))
        if not establishment_type or establishment_type.strip() == '':
            establishment_type = '–Ü–Ω—à–µ'
        
        if establishment_type not in grouped_restaurants:
            grouped_restaurants[establishment_type] = []
        
        grouped_restaurants[establishment_type].append(restaurant)
    
    # –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_parts = ["üè¢ <b>–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –∑–∞ —Ç–∏–ø–∞–º–∏:</b>\n"]
    
    # –°–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–∫–ª–∞–¥—ñ–≤ (–Ω–∞–π–±—ñ–ª—å—à–µ —Å–ø–æ—á–∞—Ç–∫—É)
    sorted_types = sorted(grouped_restaurants.items(), key=lambda x: len(x[1]), reverse=True)
    
    for establishment_type, restaurants in sorted_types:
        count = len(restaurants)
        
        # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
        icon = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è',
            '–∫–∞–≤\'—è—Ä–Ω—è': '‚òï',
            '–∫–∞—Ñ–µ': '‚òï',
            '–¥–æ—Å—Ç–∞–≤–∫–∞': 'üöö',
            'delivery': 'üöö',
            'to-go': 'ü•°',
            'takeaway': 'ü•°',
            '–±–∞—Ä': 'üç∏'
        }.get(establishment_type.lower(), 'ü™ó')
        
        message_parts.append(f"\n{icon} <b>{establishment_type.upper()}</b> ({count})")
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à—ñ 5 —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
        for i, restaurant in enumerate(restaurants[:5]):
            name = restaurant.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            cuisine = restaurant.get('cuisine', '')
            if cuisine:
                message_parts.append(f"   ‚Ä¢ {name} <i>({cuisine})</i>")
            else:
                message_parts.append(f"   ‚Ä¢ {name}")
        
        # –Ø–∫—â–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –±—ñ–ª—å—à–µ 5, –ø–æ–∫–∞–∑—É—î–º–æ "..."
        if count > 5:
            message_parts.append(f"   ‚Ä¢ ... —Ç–∞ —â–µ {count - 5}")
    
    total_count = len(restaurant_bot.restaurants_data)
    message_parts.append(f"\nüìä <b>–ó–∞–≥–∞–ª–æ–º:</b> {total_count} –∑–∞–∫–ª–∞–¥—ñ–≤")
    message_parts.append(f"üîç –î–ª—è –ø–æ—à—É–∫—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ!")
    
    full_message = '\n'.join(message_parts)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (Telegram –ª—ñ–º—ñ—Ç ~4096 —Å–∏–º–≤–æ–ª—ñ–≤)
    if len(full_message) > 4000:
        # –Ø–∫—â–æ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–µ, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Å–∫–æ—Ä–æ—á–µ–Ω—É –≤–µ—Ä—Å—ñ—é
        short_message_parts = ["üè¢ <b>–ó–∞–∫–ª–∞–¥–∏ –∑–∞ —Ç–∏–ø–∞–º–∏ (—Å–∫–æ—Ä–æ—á–µ–Ω–æ):</b>\n"]
        for establishment_type, restaurants in sorted_types:
            count = len(restaurants)
            icon = {
                '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è',
                '–∫–∞–≤\'—è—Ä–Ω—è': '‚òï',
                '–∫–∞—Ñ–µ': '‚òï',
                '–¥–æ—Å—Ç–∞–≤–∫–∞': 'üöö',
                'to-go': 'ü•°',
                '–±–∞—Ä': 'üç∏'
            }.get(establishment_type.lower(), 'ü™ó')
            short_message_parts.append(f"{icon} <b>{establishment_type}</b>: {count} –∑–∞–∫–ª–∞–¥—ñ–≤")
        
        short_message_parts.append(
