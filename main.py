import logging
import os
from typing import Dict, Optional
import asyncio
import json
import re

# Telegram imports
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
openai_client = None
user_states: Dict[int, str] = {}

# –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ —è–∫ fallback
FALLBACK_RESTAURANTS = [
    {
        "name": "–ü—É–∑–∞—Ç–∞ –•–∞—Ç–∞",
        "address": "–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 15",
        "socials": "@puzatahata",
        "vibe": "–î–æ–º–∞—à–Ω—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
        "aim": "–î–ª—è —Å—ñ–º'—ó",
        "cuisine": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞",
        "menu": "–±–æ—Ä—â, –≤–∞—Ä–µ–Ω–∏–∫–∏, –∫–æ—Ç–ª–µ—Ç–∏",
        "menu_url": "",
        "photo": ""
    },
    {
        "name": "Pizza Celentano",
        "address": "–≤—É–ª. –°–∞–∫—Å–∞–≥–∞–Ω—Å—å–∫–æ–≥–æ, 121",
        "socials": "@celentano_ua",
        "vibe": "Casual",
        "aim": "–î–ª—è –¥—Ä—É–∑—ñ–≤",
        "cuisine": "–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞",
        "menu": "–ø—ñ—Ü–∞, –ø–∞—Å—Ç–∞, —Å–∞–ª–∞—Ç–∏",
        "menu_url": "",
        "photo": ""
    },
    {
        "name": "–ö–∞–Ω–∞–ø–∞",
        "address": "–≤—É–ª. –ì–æ—Ä–æ–¥–µ—Ü—å–∫–æ–≥–æ, 6",
        "socials": "@kanapa_kyiv",
        "vibe": "–Ü–Ω—Ç–∏–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
        "aim": "–î–ª—è –ø–æ–±–∞—á–µ–Ω—å",
        "cuisine": "–Ñ–≤—Ä–æ–ø–µ–π—Å—å–∫–∞",
        "menu": "—Å—Ç–µ–π–∫, —Ä–∏–±–∞, –¥–µ—Å–µ—Ä—Ç–∏",
        "menu_url": "",
        "photo": ""
    }
]

class RestaurantBot:
    def __init__(self):
        self.restaurants_data = []
        self.google_sheets_available = False
    
    def _convert_google_drive_url(self, url: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not url or 'drive.google.com' not in url:
            return url
        
        match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if match:
            file_id = match.group(1)
            direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
            logger.info(f"–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è")
            return direct_url
        
        return url
        
    async def init_google_sheets(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
        if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEET_URL:
            logger.warning("Google Sheets credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
            self.restaurants_data = FALLBACK_RESTAURANTS
            return
            
        try:
            import gspread
            from google.oauth2.service_account import Credentials
            
            scope = [
                "https://www.googleapis.com/auth/spreadsheets.readonly",
                "https://www.googleapis.com/auth/drive.readonly"
            ]
            
            credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
            
            gc = gspread.authorize(creds)
            google_sheet = gc.open_by_url(GOOGLE_SHEET_URL)
            worksheet = google_sheet.sheet1
            
            records = worksheet.get_all_records()
            
            if records:
                self.restaurants_data = records
                self.google_sheets_available = True
                logger.info(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.restaurants_data)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ Google Sheets")
            else:
                logger.warning("Google Sheets –ø–æ—Ä–æ–∂–Ω—ñ–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ")
                self.restaurants_data = FALLBACK_RESTAURANTS
                
        except Exception as e:
            logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Google Sheets: {type(e).__name__}: {str(e)}")
            logger.info("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤")
            self.restaurants_data = FALLBACK_RESTAURANTS
            
    async def get_recommendation(self, user_request: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó"""
        try:
            if not self.restaurants_data:
                logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
                return None
            
            # –ü—Ä–æ—Å—Ç–∏–π –≤–∏–±—ñ—Ä –±–µ–∑ OpenAI –¥–ª—è –ø–æ—á–∞—Ç–∫—É
            import random
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
            filtered_restaurants = self._filter_by_keywords(user_request, self.restaurants_data)
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            chosen_restaurant = random.choice(filtered_restaurants)
            
            photo_url = chosen_restaurant.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
            
            return {
                "name": chosen_restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                "address": chosen_restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                "socials": chosen_restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                "vibe": chosen_restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                "aim": chosen_restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                "cuisine": chosen_restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                "menu": chosen_restaurant.get('menu', ''),
                "menu_url": chosen_restaurant.get('menu_url', ''),
                "photo": photo_url
            }
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {e}")
            return self._get_fallback_restaurant()

    def _filter_by_keywords(self, user_request: str, restaurant_list):
        """–ü—Ä–æ—Å—Ç–∏–π —Ñ—ñ–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö"""
        user_lower = user_request.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä—É–≤–∞–Ω–Ω—è
        if any(word in user_lower for word in ['–ø—ñ—Ü', 'pizza']):
            filtered = [r for r in restaurant_list if '–ø—ñ—Ü' in r.get('menu', '').lower() or 'pizza' in r.get('name', '').lower()]
            return filtered if filtered else restaurant_list
            
        if any(word in user_lower for word in ['—Å—ñ–º', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω']):
            filtered = [r for r in restaurant_list if '—Å—ñ–º' in r.get('aim', '').lower()]
            return filtered if filtered else restaurant_list
            
        if any(word in user_lower for word in ['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á', '–¥–≤–æ—Ö']):
            filtered = [r for r in restaurant_list if '–ø–æ–±–∞—á' in r.get('aim', '').lower() or '—ñ–Ω—Ç–∏–º' in r.get('vibe', '').lower()]
            return filtered if filtered else restaurant_list
            
        return restaurant_list

    def _get_fallback_restaurant(self):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"""
        return {
            "name": "–õ–æ–∫–∞–ª—å–Ω–µ –∫–∞—Ñ–µ",
            "address": "–í–∞—à–µ –º—ñ—Å—Ç–æ",
            "socials": "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            "vibe": "–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
            "aim": "–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π",
            "cuisine": "–†—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∞ –∫—É—Ö–Ω—è",
            "menu": "",
            "menu_url": "",
            "photo": ""
        }

restaurant_bot = RestaurantBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_request"
    
    message = (
        "–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω!\n\n"
        "–†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ –ø—Ä–æ —Å–≤–æ—î –ø–æ–±–∞–∂–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ '–•–æ—á—É –º—ñ—Å—Ü–µ –¥–ª—è –æ–±—ñ–¥—É –∑ —Å—ñ–º'—î—é'\n"
        "‚Ä¢ '–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è'\n"
        "‚Ä¢ '–®—É–∫–∞—é –ø—ñ—Ü—É –∑ –¥—Ä—É–∑—è–º–∏'\n\n"
        "–ù–∞–ø–∏—à–∏, —â–æ —Ç–∏ —à—É–∫–∞—î—à!"
    )
    
    await update.message.reply_text(message)
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = update.effective_user.id
    
    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏")
        return
    
    user_request = update.message.text
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–ø–∏—Å–∞–≤: {user_request}")
    
    processing_message = await update.message.reply_text("–®—É–∫–∞—é —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –≤–∞—Å...")
    
    recommendation = await restaurant_bot.get_recommendation(user_request)
    
    try:
        await processing_message.delete()
    except:
        pass
    
    if recommendation:
        response_text = f"""<b>{recommendation['name']}</b>

üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {recommendation['address']}

üì± <b>–°–æ—Ü-–º–µ—Ä–µ–∂—ñ:</b> {recommendation['socials']}

‚ú® <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> {recommendation['vibe']}"""

        menu_url = recommendation.get('menu_url', '')
        if menu_url and menu_url.startswith('http'):
            response_text += f"\n\nüìã <a href='{menu_url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é</a>"

        photo_url = recommendation.get('photo', '')
        
        if photo_url and photo_url.startswith('http'):
            try:
                await update.message.reply_photo(
                    photo=photo_url,
                    caption=response_text,
                    parse_mode='HTML'
                )
            except Exception:
                await update.message.reply_text(response_text, parse_mode='HTML')
        else:
            await update.message.reply_text(response_text, parse_mode='HTML')
    else:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
    
    del user_states[user_id]
    await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
    
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("Telegram –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)
        
        logger.info("–ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ Google Sheets...")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Google Sheets —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(restaurant_bot.init_google_sheets())
        
        logger.info("–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        loop.run_until_complete(application.run_polling(drop_pending_updates=True))
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        try:
            loop.close()
        except:
            pass

if __name__ == '__main__':
    main()
