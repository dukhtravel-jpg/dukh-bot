import logging
import os
from typing import Dict, Optional, List, Tuple
import asyncio
import json
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –î–æ–¥–∞—î–º–æ fuzzy matching –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –ø–æ—à—É–∫—É
try:
    from fuzzywuzzy import fuzz
    FUZZY_AVAILABLE = True
except ImportError:
    FUZZY_AVAILABLE = False
    logger = logging.getLogger(__name__)
    logger.warning("fuzzywuzzy –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Fuzzy matching –±—É–¥–µ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ.")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')
ANALYTICS_SHEET_URL = os.getenv('ANALYTICS_SHEET_URL', GOOGLE_SHEET_URL)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É
ENHANCED_SEARCH_CONFIG = {
    'enabled': True,
    'fuzzy_matching': True,
    'fuzzy_threshold': 80,
    'regex_boundaries': True,
    'negation_detection': True,
    'extended_synonyms': True,
    'fallback_to_old': True
}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
openai_client = None
user_states: Dict[int, str] = {}
user_last_recommendation: Dict[int, str] = {}
user_rating_data: Dict[int, Dict] = {}

class EnhancedRestaurantBot:
    def __init__(self):
        self.restaurants_data = []
        self.google_sheets_available = False
        self.analytics_sheet = None
        self.gc = None
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ —Å–ª–æ–≤–Ω–∏–∫–∏ —Å–∏–Ω–æ–Ω—ñ–º—ñ–≤
        self.extended_synonyms = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω—á–∏–∫', '—ó–¥–∞–ª—å–Ω—è', '–∑–∞–∫–ª–∞–¥'],
            '–∫–∞–≤\'—è—Ä–Ω—è': ['–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ', '–∫–∞–≤–∞', '–∫–∞–≤–∞—Ä–Ω—è', 'coffee', '–∫–æ—Ñ–µ'],
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü–∞', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª—ã', '—Å–∞—à—ñ–º—ñ'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            '—Ä–æ–º–∞–Ω—Ç–∏–∫': ['—Ä–æ–º–∞–Ω—Ç–∏–∫', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—ñ–Ω—Ç–∏–º–Ω–∏–π', '–∑–∞—Ç–∏—à–Ω–∏–π', '—Å–≤—ñ—á–∫–∏'],
            '—Å—ñ–º–µ–π–Ω–∏–π': ['—Å—ñ–º\'—è', '—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç–∏', '—Ä–æ–¥–∏–Ω–∞', '–¥–∏—Ç—è—á–∏–π', '–¥–ª—è –≤—Å—ñ—î—ó —Å—ñ–º\'—ó'],
            '–≤–µ—Å–µ–ª–∏–π': ['–≤–µ—Å–µ–ª', '–∂–≤–∞–≤–∏–π', '–µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π', '–≥—É—á–Ω–∏–π', '–¥—Ä–∞–π–≤–æ–≤–∏–π', '–º–æ–ª–æ–¥—ñ–∂–Ω–∏–π'],
            '—à–≤–∏–¥–∫–æ': ['—à–≤–∏–¥–∫–æ', '—à–≤–∏–¥–∫—É', '—à–≤–∏–¥–∫–∏–π', 'fast', '–ø–µ—Ä–µ–∫—É—Å', '–ø–æ—Å–ø—ñ—à–∞—é', '–Ω–∞ —à–≤–∏–¥–∫—É —Ä—É–∫—É'],
            '–¥–æ—Å—Ç–∞–≤–∫–∞': ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–¥–æ–¥–æ–º—É', '–Ω–µ —Ö–æ—á—É –π—Ç–∏', '–ø—Ä–∏–≤–µ–∑—Ç–∏', 'delivery']
        }
        
        # –°–ª–æ–≤–∞-–∑–∞–ø–µ—Ä–µ—á–µ–Ω–Ω—è
        self.negation_words = [
            '–Ω–µ', '–Ω—ñ', '–Ω—ñ–∫–æ–ª–∏', '–Ω—ñ–¥–µ', '–±–µ–∑', '–Ω–µ–º–∞', '–Ω–µ–º–∞—î', 
            '–Ω–µ —Ö–æ—á—É', '–Ω–µ –ª—é–±–ª—é', '–Ω–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è', '–Ω–µ —Ç—Ä–µ–±–∞'
        ]
    
    def _convert_google_drive_url(self, url: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not url or 'drive.google.com' not in url:
            return url
        
        match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if match:
            file_id = match.group(1)
            direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
            logger.info(f"–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url} ‚Üí {direct_url}")
            return direct_url
        
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –∑ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
        return url
    
    async def init_google_sheets(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
        if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEET_URL:
            logger.error("Google Sheets credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
            
        try:
            scope = [
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive.readonly"
            ]
            
            credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
            
            self.gc = gspread.authorize(creds)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
            google_sheet = self.gc.open_by_url(GOOGLE_SHEET_URL)
            worksheet = google_sheet.sheet1
            
            records = worksheet.get_all_records()
            
            if records:
                self.restaurants_data = records
                self.google_sheets_available = True
                logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.restaurants_data)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ Google Sheets")
            else:
                logger.warning("Google Sheets –ø–æ—Ä–æ–∂–Ω—ñ–π")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É —Ç–∞–±–ª–∏—Ü—é
            await self.init_analytics_sheet()
                
        except Exception as e:
            logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Google Sheets: {type(e).__name__}: {str(e)}")
    
    async def init_analytics_sheet(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            analytics_sheet = self.gc.open_by_url(ANALYTICS_SHEET_URL)
            logger.info(f"üìä –í—ñ–¥–∫—Ä–∏—Ç–æ —Ç–∞–±–ª–∏—Ü—é –¥–ª—è analytics: {ANALYTICS_SHEET_URL}")
            
            try:
                self.analytics_sheet = analytics_sheet.worksheet("Analytics")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç Analytics")
            except gspread.WorksheetNotFound:
                logger.info("üìÑ –ê—Ä–∫—É—à Analytics –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—é –Ω–æ–≤–∏–π...")
                
                self.analytics_sheet = analytics_sheet.add_worksheet(title="Analytics", rows="1000", cols="12")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç Analytics")
                
                headers = [
                    "Timestamp", "User ID", "User Request", "Restaurant Name", 
                    "Rating", "Rating Explanation", "Date", "Time"
                ]
                self.analytics_sheet.append_row(headers)
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ Analytics")
            
            try:
                self.summary_sheet = analytics_sheet.worksheet("Summary")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç Summary")
            except gspread.WorksheetNotFound:
                self.summary_sheet = analytics_sheet.add_worksheet(title="Summary", rows="100", cols="5")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç Summary")
                
                summary_data = [
                    ["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è", "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"],
                    ["–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
                ]
                
                for row in summary_data:
                    self.summary_sheet.append_row(row)
                    
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω–Ω—ñ –¥–æ Summary")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Analytics: {e}")
            self.analytics_sheet = None

    def _comprehensive_content_analysis(self, user_request: str) -> Tuple[bool, List[Dict], str]:
        """–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–ø–∏—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ –í–°–Ü–• –∫–æ–ª–æ–Ω–∫–∞—Ö —Ç–∞–±–ª–∏—Ü—ñ"""
        user_lower = user_request.lower()
        logger.info(f"üîé –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: '{user_request}'")
        
        # –†–æ–∑—à–∏—Ä–µ–Ω—ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É –ø–æ –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
        search_criteria = {
            '–º–∞—Ç—á–∞': {
                'keywords': ['–º–∞—Ç—á–∞', 'matcha', '–º–∞—Ç—á—ñ', '–º–∞—Ç—á—É'],
                'columns': ['menu', 'aim', 'vibe', 'cuisine', 'name'],
                'weight': 3.0
            },
            '–∫–∞–≤–∞': {
                'keywords': ['–∫–∞–≤–∞', '–∫–æ—Ñ–µ', 'coffee', '–∫–∞–ø—É—á—ñ–Ω–æ', '–ª–∞—Ç—Ç–µ', '–µ—Å–ø—Ä–µ—Å–æ', '–∞–º–µ—Ä–∏–∫–∞–Ω–æ'],
                'columns': ['menu', 'aim', 'cuisine', 'name', 'vibe'],
                'weight': 2.8
            },
            '–ø—ñ—Ü–∞': {
                'keywords': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–º–∞—Ä“ë–∞—Ä–∏—Ç–∞', '–ø–µ–ø–µ—Ä–æ–Ω—ñ'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 3.0
            },
            '—Å—É—à—ñ': {
                'keywords': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ', '—è–ø–æ–Ω—Å—å–∫–∞ –∫—É—Ö–Ω—è'],
                'columns': ['menu', 'cuisine', 'name', 'vibe'],
                'weight': 3.0
            },
            '–º—ñ–¥—ñ—ó': {
                'keywords': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ó', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π', '–º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç–∏'],
                'columns': ['menu', 'cuisine', 'name'],
                'weight': 3.2
            },
            '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ': {
                'keywords': ['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—ñ–Ω—Ç–∏–º–Ω', '–∑–∞—Ç–∏—à–Ω', '—Å–≤—ñ—á–∫–∏', '–¥–ª—è –¥–≤–æ—Ö'],
                'columns': ['vibe', 'aim', 'name'],
                'weight': 2.8
            },
            '—Å—ñ–º–µ–π–Ω–æ': {
                'keywords': ['—Å—ñ–º\'—è', '—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç–∏', '—Ä–æ–¥–∏–Ω', '–¥–ª—è –≤—Å—ñ—î—ó —Å—ñ–º\'—ó'],
                'columns': ['vibe', 'aim', 'name'],
                'weight': 2.5
            },
            '–ø—Ä–∞—Ü—é–≤–∞—Ç–∏': {
                'keywords': ['–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', '–ø–æ–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', '—Ä–æ–±–æ—Ç–∞', '–Ω–æ—É—Ç–±—É–∫', 'wifi', '—Ñ—Ä—ñ–ª–∞–Ω—Å'],
                'columns': ['aim', 'vibe'],
                'weight': 2.8
            },
            '—ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏–π': {
                'keywords': ['—ñ—Ç–∞–ª', 'italian', '—ñ—Ç–∞–ª—ñ—è'],
                'columns': ['cuisine', 'vibe', 'name'],
                'weight': 2.5
            }
        }
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –∫–æ–∂–µ–Ω –∑–∞–∫–ª–∞–¥
        restaurant_scores = []
        
        for restaurant in self.restaurants_data:
            total_score = 0.0
            matched_criteria = []
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–∂–µ–Ω –∫—Ä–∏—Ç–µ—Ä—ñ–π
            for criterion_name, criterion_data in search_criteria.items():
                keywords = criterion_data['keywords']
                columns = criterion_data['columns'] 
                weight = criterion_data['weight']
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤ –∑–∞–ø–∏—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_has_criterion = any(keyword in user_lower for keyword in keywords)
                
                if user_has_criterion:
                    # –®—É–∫–∞—î–º–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
                    restaurant_has_criterion = False
                    matched_columns = []
                    
                    for column in columns:
                        column_text = str(restaurant.get(column, '')).lower()
                        
                        if any(keyword in column_text for keyword in keywords):
                            restaurant_has_criterion = True
                            matched_columns.append(column)
                            logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î '{criterion_name}' –≤ –∫–æ–ª–æ–Ω—Ü—ñ '{column}'")
                            break
                    
                    if restaurant_has_criterion:
                        # –î–æ–¥–∞—î–º–æ –±–æ–Ω—É—Å –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω—å –≤ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
                        column_bonus = len(set(matched_columns)) * 0.2
                        final_score = weight + column_bonus
                        total_score += final_score
                        matched_criteria.append(f"{criterion_name}({','.join(matched_columns)})")
            
            if total_score > 0:
                restaurant_scores.append({
                    'restaurant': restaurant,
                    'score': total_score,
                    'criteria': matched_criteria
                })
                logger.info(f"üéØ {restaurant.get('name', '')}: –æ—Ü—ñ–Ω–∫–∞ {total_score:.1f} –∑–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ {matched_criteria}")
        
        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫–æ—é
        restaurant_scores.sort(key=lambda x: x['score'], reverse=True)
        
        if restaurant_scores:
            # –ë–µ—Ä–µ–º–æ –∑–∞–∫–ª–∞–¥–∏ –∑ –Ω–∞–π–≤–∏—â–∏–º–∏ –æ—Ü—ñ–Ω–∫–∞–º–∏
            top_score = restaurant_scores[0]['score']
            threshold = top_score * 0.7
            top_restaurants = [item for item in restaurant_scores if item['score'] >= threshold]
            
            explanation = f"–∑–Ω–∞–π–¥–µ–Ω–æ {len(top_restaurants)} –Ω–∞–π—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ—à–∏—Ö –∑–∞–∫–ª–∞–¥—ñ–≤"
            logger.info(f"üéâ –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: {explanation}")
            
            return True, top_restaurants, explanation
        else:
            logger.info("ü§î –ü–û–ö–†–ê–©–ï–ù–ò–ô –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤")
            return False, [], "–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–∏—Ö –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤"

    def _check_dish_availability(self, user_request: str) -> Tuple[bool, List[str]]:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —î –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Å—Ç—Ä–∞–≤–∞ –≤ –º–µ–Ω—é —Ö–æ—á–∞ –± –æ–¥–Ω–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É"""
        user_lower = user_request.lower()
        logger.info(f"üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—é –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å—Ç—Ä–∞–≤ –≤ –∑–∞–ø–∏—Ç—ñ: '{user_request}'")
        
        food_keywords = {
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '–ø–∞—Å—Ç–∞': ['–ø–∞—Å—Ç–∞', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', 'pasta', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', '–º–∞–∫–∞—Ä–æ–Ω–∏'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '–º—ñ–¥—ñ—ó': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ñ', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π']
        }
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —è–∫—ñ —Å—Ç—Ä–∞–≤–∏ –∑–≥–∞–¥–∞–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
        requested_dishes = []
        for dish, keywords in food_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                requested_dishes.append(dish)
        
        if not requested_dishes:
            return False, []
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ü—ñ —Å—Ç—Ä–∞–≤–∏ –≤ –º–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
        dishes_found_in_restaurants = []
        
        for dish in requested_dishes:
            found_in_any_restaurant = False
            dish_keywords = food_keywords[dish]
            
            for restaurant in self.restaurants_data:
                menu_text = restaurant.get('menu', '').lower()
                
                if any(keyword.lower() in menu_text for keyword in dish_keywords):
                    found_in_any_restaurant = True
                    break
            
            if found_in_any_restaurant:
                dishes_found_in_restaurants.append(dish)
        
        if dishes_found_in_restaurants:
            return True, dishes_found_in_restaurants
        else:
            return False, requested_dishes

    def _get_dish_keywords(self, dish: str) -> List[str]:
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å—Ç—Ä–∞–≤–∏"""
        food_keywords = {
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', '–ø—ñ—Ü—Ü', 'pizza', '–ø—ñ—Ü–∏', '–ø—ñ–∑–∑—É'],
            '–ø–∞—Å—Ç–∞': ['–ø–∞—Å—Ç–∞', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', 'pasta', '—Å–ø–∞–≥–µ—Ç—Ç—ñ', '–º–∞–∫–∞—Ä–æ–Ω–∏'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä', '—á—ñ–∑–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '–º—ñ–¥—ñ—ó': ['–º—ñ–¥—ñ—ó', '–º–∏–¥–∏–∏', '–º—ñ–¥—ñ—ñ', '–º–æ–ª—é—Å–∫–∏', '–º—ñ–¥—ñ–π']
        }
        return food_keywords.get(dish, [dish])

    def _filter_by_establishment_type(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ —Ç–∏–ø–æ–º –∑–∞–∫–ª–∞–¥—É"""
        user_lower = user_request.lower()
        
        type_keywords = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': {
                'user_keywords': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–æ–±—ñ–¥', '–≤–µ—á–µ—Ä—è', '–ø–æ–±–∞—á–µ–Ω–Ω—è', '—Ä–æ–º–∞–Ω—Ç–∏–∫'],
                'establishment_types': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω']
            },
            '–∫–∞–≤\'—è—Ä–Ω—è': {
                'user_keywords': ['–∫–∞–≤–∞', '–∫–∞–ø—É—á—ñ–Ω–æ', '–ª–∞—Ç—Ç–µ', '–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ'],
                'establishment_types': ['–∫–∞–≤\'—è—Ä–Ω—è', '–∫–∞—Ñ–µ']
            }
        }
        
        detected_types = []
        for establishment_type, keywords in type_keywords.items():
            user_match = any(keyword in user_lower for keyword in keywords['user_keywords'])
            if user_match:
                detected_types.extend(keywords['establishment_types'])
        
        if not detected_types:
            return restaurant_list
        
        filtered_restaurants = []
        for restaurant in restaurant_list:
            establishment_type = restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '')).lower().strip()
            type_match = any(detected_type.lower().strip() in establishment_type for detected_type in detected_types)
            
            if type_match:
                filtered_restaurants.append(restaurant)
        
        return filtered_restaurants if filtered_restaurants else restaurant_list

    def _filter_by_context(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø–∏—Ç—É"""
        user_lower = user_request.lower()
        
        context_filters = {
            'romantic': {
                'user_keywords': ['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω', '—ñ–Ω—Ç–∏–º–Ω'],
                'restaurant_keywords': ['—ñ–Ω—Ç–∏–º–Ω', '—Ä–æ–º–∞–Ω—Ç', '–ø–∞—Ä']
            },
            'family': {
                'user_keywords': ['—Å—ñ–º', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω'],
                'restaurant_keywords': ['—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω']
            }
        }
        
        detected_contexts = []
        for context, keywords in context_filters.items():
            user_match = any(keyword in user_lower for keyword in keywords['user_keywords'])
            if user_match:
                detected_contexts.append(context)
        
        if not detected_contexts:
            return restaurant_list
        
        filtered_restaurants = []
        for restaurant in restaurant_list:
            restaurant_text = f"{restaurant.get('vibe', '')} {restaurant.get('aim', '')}".lower()
            
            restaurant_score = 0
            for context in detected_contexts:
                context_keywords = context_filters[context]['restaurant_keywords']
                if any(keyword in restaurant_text for keyword in context_keywords):
                    restaurant_score += 1
            
            if restaurant_score > 0:
                filtered_restaurants.append(restaurant)
        
        return filtered_restaurants if filtered_restaurants else restaurant_list

    def _filter_by_menu(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –ø–æ –º–µ–Ω—é"""
        user_lower = user_request.lower()
        
        food_keywords = {
            '–ø—ñ—Ü–∞': ['–ø—ñ—Ü–∞', 'pizza'],
            '—Å—É—à—ñ': ['—Å—É—à—ñ', 'sushi', '—Ä–æ–ª–∏'],
            '–ø–∞—Å—Ç–∞': ['–ø–∞—Å—Ç–∞', 'pasta']
        }
        
        requested_dishes = []
        for dish, keywords in food_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                requested_dishes.append(dish)
        
        if requested_dishes:
            filtered_restaurants = []
            for restaurant in restaurant_list:
                menu_text = restaurant.get('menu', '').lower()
                has_requested_dish = False
                
                for dish in requested_dishes:
                    dish_keywords = food_keywords[dish]
                    if any(keyword in menu_text for keyword in dish_keywords):
                        has_requested_dish = True
                        break
                
                if has_requested_dish:
                    filtered_restaurants.append(restaurant)
            
            return filtered_restaurants if filtered_restaurants else restaurant_list
        
        return restaurant_list

    async def get_recommendation(self, user_request: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ OpenAI"""
        try:
            global openai_client
            if openai_client is None:
                import openai
                openai.api_key = OPENAI_API_KEY
                openai_client = openai
                logger.info("‚úÖ OpenAI –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            if not self.restaurants_data:
                logger.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
                return None
            
            import random
            shuffled_restaurants = self.restaurants_data.copy()
            random.shuffle(shuffled_restaurants)
            
            # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –ø–æ –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–∫–∞—Ö
            has_specific_criteria, relevant_restaurants, analysis_explanation = self._comprehensive_content_analysis(user_request)
            
            if has_specific_criteria:
                shuffled_restaurants = [item['restaurant'] for item in relevant_restaurants]
                logger.info(f"üéØ –í–ò–ö–û–†–ò–°–¢–û–í–£–Æ –ö–û–ú–ü–õ–ï–ö–°–ù–ò–ô –ê–ù–ê–õ–Ü–ó: {analysis_explanation}")
            else:
                logger.info("üîç –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤, –ø–µ—Ä–µ–≤—ñ—Ä—è—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏...")
                
                has_dish, dishes_info = self._check_dish_availability(user_request)
                
                if dishes_info:
                    if not has_dish:
                        missing_dishes = ", ".join(dishes_info)
                        return {
                            "dish_not_found": True,
                            "missing_dishes": missing_dishes,
                            "message": f"–ù–∞ –∂–∞–ª—å, {missing_dishes} —â–µ –Ω–µ–º–∞—î –≤ –Ω–∞—à–æ–º—É –ø–µ—Ä–µ–ª—ñ–∫—É. –°–ø—Ä–æ–±—É–π —ñ–Ω—à—É —Å—Ç—Ä–∞–≤—É!"
                        }
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
            if not has_specific_criteria:
                type_filtered = self._filter_by_establishment_type(user_request, shuffled_restaurants)
                context_filtered = self._filter_by_context(user_request, type_filtered)
                final_filtered = self._filter_by_menu(user_request, context_filtered)
            else:
                final_filtered = shuffled_restaurants
            
            if not final_filtered:
                return None
            
            # OpenAI –∑–∞–ø–∏—Ç
            restaurants_details = []
            for i, r in enumerate(final_filtered):
                establishment_type = r.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', r.get('type', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'))
                detail = f"""–í–∞—Ä—ñ–∞–Ω—Ç {i+1}:
- –ù–∞–∑–≤–∞: {r.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}
- –¢–∏–ø: {establishment_type}
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {r.get('vibe', '–ù–µ –æ–ø–∏—Å–∞–Ω–∞')}
- –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è: {r.get('aim', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}
- –ö—É—Ö–Ω—è: {r.get('cuisine', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}"""
                restaurants_details.append(detail)
            
            restaurants_text = "\n\n".join(restaurants_details)
            
            prompt = f"""–ó–ê–ü–ò–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê: "{user_request}"

{restaurants_text}

–ó–ê–í–î–ê–ù–ù–Ø:
1. –û–±–µ—Ä–∏ 2 –ù–ê–ô–ö–†–ê–©–Ü –≤–∞—Ä—ñ–∞–Ω—Ç–∏ (—è–∫—â–æ —î —Ç—ñ–ª—å–∫–∏ 1 –≤–∞—Ä—ñ–∞–Ω—Ç, —Ç–æ —Ç—ñ–ª—å–∫–∏ –π–æ–≥–æ)
2. –í–∫–∞–∂–∏ —è–∫–∏–π –∑ –Ω–∏—Ö —î –ü–†–Ü–û–†–ò–¢–ï–¢–ù–ò–ú —ñ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ—è—Å–Ω–∏ –ß–û–ú–£

–§–û–†–ú–ê–¢ –í–Ü–î–ü–û–í–Ü–î–Ü:
–í–∞—Ä—ñ–∞–Ω—Ç–∏: [–Ω–æ–º–µ—Ä1, –Ω–æ–º–µ—Ä2]
–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: [–Ω–æ–º–µ—Ä] - [–∫–æ—Ä–æ—Ç–∫–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –ø—Ä–∏—á–∏–Ω–∏]"""

            def make_openai_request():
                return openai_client.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-—Ä–µ—Å—Ç–æ—Ä–∞—Ç–æ—Ä. –ê–Ω–∞–ª—ñ–∑—É–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ç–∞ –æ–±–∏—Ä–∞–π –Ω–∞–π–∫—Ä–∞—â—ñ –∑ –æ–±'—Ä—É–Ω—Ç—É–≤–∞–Ω–Ω—è–º."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=200,
                    temperature=0.3,
                    top_p=0.9
                )
            
            response = await asyncio.wait_for(
                asyncio.to_thread(make_openai_request),
                timeout=20
            )
            
            choice_text = response.choices[0].message.content.strip()
            logger.info(f"ü§ñ OpenAI –ø–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{choice_text}'")
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI
            recommendations = self._parse_dual_recommendation(choice_text, final_filtered)
            
            if recommendations:
                return recommendations
            else:
                return self._fallback_dual_selection(user_request, final_filtered)
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {e}")
            return self._fallback_dual_selection(user_request, self.restaurants_data)

    def _parse_dual_recommendation(self, openai_response: str, filtered_restaurants):
        """–ü–∞—Ä—Å–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI –∑ –¥–≤–æ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏"""
        try:
            lines = openai_response.strip().split('\n')
            variants_line = ""
            priority_line = ""
            
            for line in lines:
                line = line.strip()
                if line.lower().startswith('–≤–∞—Ä—ñ–∞–Ω—Ç') and '[' in line:
                    variants_line = line
                elif line.lower().startswith('–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç') and '-' in line:
                    priority_line = line
            
            # –í–∏—Ç—è–≥—É—î–º–æ –Ω–æ–º–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤
            import re
            numbers = re.findall(r'\d+', variants_line)
            
            if len(numbers) >= 1:
                indices = [int(num) - 1 for num in numbers[:2]]
                valid_indices = [idx for idx in indices if 0 <= idx < len(filtered_restaurants)]
                
                if not valid_indices:
                    return None
                
                restaurants = [filtered_restaurants[idx] for idx in valid_indices]
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
                priority_num = None
                priority_explanation = "–Ω–∞–π–∫—Ä–∞—â–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑–∞ –≤—Å—ñ–º–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏"
                
                if priority_line and '-' in priority_line:
                    priority_match = re.search(r'(\d+)', priority_line.split('-')[0])
                    if priority_match:
                        priority_num = int(priority_match.group(1))
                    
                    explanation_part = priority_line.split('-', 1)[1].strip()
                    if explanation_part:
                        priority_explanation = explanation_part
                
                if priority_num and (priority_num - 1) in valid_indices:
                    priority_index = valid_indices.index(priority_num - 1)
                else:
                    priority_index = 0
                
                result = {
                    "restaurants": [],
                    "priority_index": priority_index,
                    "priority_explanation": priority_explanation
                }
                
                for restaurant in restaurants:
                    photo_url = restaurant.get('photo', '')
                    if photo_url:
                        photo_url = self._convert_google_drive_url(photo_url)
                    
                    result["restaurants"].append({
                        "name": restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                        "address": restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                        "socials": restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                        "vibe": restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                        "aim": restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                        "cuisine": restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                        "menu": restaurant.get('menu', ''),
                        "menu_url": restaurant.get('menu_url', ''),
                        "photo": photo_url,
                        "type": restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–ó–∞–∫–ª–∞–¥'))
                    })
                
                return result
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ OpenAI: {e}")
            return None

    def _fallback_dual_selection(self, user_request: str, restaurant_list):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –¥–≤–æ—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π"""
        if not restaurant_list:
            return None
        
        import random
        
        if len(restaurant_list) == 1:
            chosen = restaurant_list[0]
            photo_url = chosen.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
                
            return {
                "restaurants": [{
                    "name": chosen.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                    "address": chosen.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                    "socials": chosen.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                    "vibe": chosen.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                    "aim": chosen.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                    "cuisine": chosen.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                    "menu": chosen.get('menu', ''),
                    "menu_url": chosen.get('menu_url', ''),
                    "photo": photo_url,
                    "type": chosen.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', chosen.get('type', '–ó–∞–∫–ª–∞–¥'))
                }],
                "priority_index": 0,
                "priority_explanation": "—î–¥–∏–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó"
            }
        
        # –í–∏–±–∏—Ä–∞—î–º–æ 2 –Ω–∞–π–∫—Ä–∞—â–∏—Ö
        scored_restaurants = []
        user_lower = user_request.lower()
        
        for restaurant in restaurant_list:
            score = random.uniform(0, 1)
            scored_restaurants.append((score, restaurant))
        
        scored_restaurants.sort(key=lambda x: x[0], reverse=True)
        top_restaurants = [item[1] for item in scored_restaurants[:2]]
        
        result = {
            "restaurants": [],
            "priority_index": 0,
            "priority_explanation": "–Ω–∞–π–≤–∏—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ"
        }
        
        for restaurant in top_restaurants:
            photo_url = restaurant.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
            
            result["restaurants"].append({
                "name": restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                "address": restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                "socials": restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                "vibe": restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                "aim": restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                "cuisine": restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                "menu": restaurant.get('menu', ''),
                "menu_url": restaurant.get('menu_url', ''),
                "photo": photo_url,
                "type": restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–ó–∞–∫–ª–∞–¥'))
            })
        
        return result

    async def log_request(self, user_id: int, user_request: str, restaurant_name: str, rating: Optional[int] = None, explanation: str = ""):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        if not self.analytics_sheet:
            logger.warning("Analytics sheet –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return
            
        try:
            now = datetime.now()
            timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
            date = now.strftime("%Y-%m-%d")
            time = now.strftime("%H:%M:%S")
            
            row_data = [
                timestamp,
                str(user_id),
                user_request,
                restaurant_name,
                str(rating) if rating else "",
                explanation,
                date,
                time
            ]
            
            self.analytics_sheet.append_row(row_data)
            logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ –¥–æ Analytics: {user_id} - {restaurant_name}")
            
            await self.update_summary_stats()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")
    
    async def update_summary_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.analytics_sheet or not self.summary_sheet:
            return
            
        try:
            all_records = self.analytics_sheet.get_all_records()
            
            if not all_records:
                return
            
            total_requests = len(all_records)
            unique_users = len(set(record['User ID'] for record in all_records))
            
            ratings = [int(record['Rating']) for record in all_records if record['Rating'] and str(record['Rating']).isdigit()]
            avg_rating = sum(ratings) / len(ratings) if ratings else 0
            rating_count = len(ratings)
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            self.summary_sheet.update('B2', str(total_requests))
            self.summary_sheet.update('C2', timestamp)
            
            self.summary_sheet.update('B3', str(unique_users))
            self.summary_sheet.update('C3', timestamp)
            
            self.summary_sheet.update('B4', f"{avg_rating:.2f}")
            self.summary_sheet.update('C4', timestamp)
            
            self.summary_sheet.update('B5', str(rating_count))
            self.summary_sheet.update('C5', timestamp)
            
            logger.info(f"üìà –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –ó–∞–ø–∏—Ç—ñ–≤: {total_requests}, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {unique_users}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –±–æ—Ç–∞
restaurant_bot = EnhancedRestaurantBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_request"
    
    message = """üçΩ <b>–í—ñ—Ç–∞—é –≤ Restaurant Bot!</b>

–Ø –¥–æ–ø–æ–º–æ–∂—É –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π –∑–∞–∫–ª–∞–¥ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó!

<b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ:</b>
‚Ä¢ "–†–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è"
‚Ä¢ "–ö–∞–≤'—è—Ä–Ω—è –¥–µ –º–æ–∂–Ω–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏"  
‚Ä¢ "–ü—ñ—Ü–∞ –∑ –¥—Ä—É–∑—è–º–∏"
‚Ä¢ "–î–µ –≤–∏–ø–∏—Ç–∏ –º–∞—Ç—á—É?"

<b>–ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/help - –î–µ—Ç–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
/list_restaurants - –í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –∑–∞ —Ç–∏–ø–∞–º–∏

<b>–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏?</b> –û–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ! ‚ú®"""
    
    await update.message.reply_text(message, parse_mode='HTML')
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –ø–æ–≤–Ω–∞ –¥–æ–≤—ñ–¥–∫–∞ –ø–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—é –±–æ—Ç–∞"""
    help_text = """ü§ñ <b>–î–æ–≤—ñ–¥–∫–∞ –ø–æ Restaurant Bot</b>

<b>üéØ –Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º:</b>
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ –≤–∏ —à—É–∫–∞—î—Ç–µ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é –º–æ–≤–æ—é!

<b>üîç –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–∞–ø–∏—Ç—ñ–≤:</b>
‚Ä¢ "–•–æ—á—É –ø—ñ—Ü—É –∑ –¥—Ä—É–∑—è–º–∏"
‚Ä¢ "–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è"
‚Ä¢ "–î–µ –º–æ–∂–Ω–∞ –≤–∏–ø–∏—Ç–∏ –º–∞—Ç—á—É?"
‚Ä¢ "–°—ñ–º–µ–π–Ω–µ –º—ñ—Å—Ü–µ –¥–ª—è –æ–±—ñ–¥—É"
‚Ä¢ "–®–≤–∏–¥–∫–æ –ø–µ—Ä–µ–∫—É—Å–∏—Ç–∏"
‚Ä¢ "–Ü—Ç–∞–ª—ñ–π—Å—å–∫–∞ –∫—É—Ö–Ω—è –≤ —Ü–µ–Ω—Ç—Ä—ñ"

<b>üîé –©–æ –±–æ—Ç —Ä–æ–∑—É–º—ñ—î:</b>
‚Ä¢ <i>–°—Ç—Ä–∞–≤–∏:</i> –ø—ñ—Ü–∞, —Å—É—à—ñ, –ø–∞—Å—Ç–∞, –º—ñ–¥—ñ—ó, —Å—Ç–µ–π–∫ —Ç–∞ —ñ–Ω.
‚Ä¢ <i>–ê—Ç–º–æ—Å—Ñ–µ—Ä—É:</i> —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ, —Å—ñ–º–µ–π–Ω–æ, –≤–µ—Å–µ–ª–æ, –∑–∞—Ç–∏—à–Ω–æ
‚Ä¢ <i>–ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è:</i> –ø–æ–±–∞—á–µ–Ω–Ω—è, –¥—Ä—É–∑—ñ, —Ä–æ–±–æ—Ç–∞, —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è
‚Ä¢ <i>–¢–∏–ø–∏:</i> —Ä–µ—Å—Ç–æ—Ä–∞–Ω, –∫–∞–≤'—è—Ä–Ω—è, –¥–æ—Å—Ç–∞–≤–∫–∞, to-go
‚Ä¢ <i>–ö—É—Ö–Ω—é:</i> —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∞, —è–ø–æ–Ω—Å—å–∫–∞, –≥—Ä—É–∑–∏–Ω—Å—å–∫–∞ —Ç–∞ —ñ–Ω.

<b>‚≠ê –û—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:</b>
–ü—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –æ—Ü—ñ–Ω—ñ—Ç—å —ó—ó –≤—ñ–¥ 1 –¥–æ 10
–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó!

<b>üìã –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>
/start - –ü–æ—á–∞—Ç–∏ –ø–æ—à—É–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
/help - –¶—è –¥–æ–≤—ñ–¥–∫–∞
/list_restaurants - –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ–≤)

<b>üí° –ü–æ—Ä–∞–¥–∏:</b>
‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏: "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∏–π —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω"
‚Ä¢ –í–∫–∞–∑—É–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç: "–∑ –¥—ñ—Ç—å–º–∏", "–¥–ª—è —Ä–æ–±–æ—Ç–∏"  
‚Ä¢ –ó–≥–∞–¥—É–π—Ç–µ –ø–æ–±–∞–∂–∞–Ω–Ω—è: "–∑ —Ç–µ—Ä–∞—Å–æ—é", "–≤ —Ü–µ–Ω—Ç—Ä—ñ"

–ì–æ—Ç–æ–≤—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–µ –º—ñ—Å—Ü–µ? –ù–∞–ø–∏—à—ñ—Ç—å —Å–≤—ñ–π –∑–∞–ø–∏—Ç! üçΩÔ∏è"""

    await update.message.reply_text(help_text, parse_mode='HTML')
    logger.info(f"üìñ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ –¥–æ–≤—ñ–¥–∫—É")

async def list_restaurants_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /list_restaurants - —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–∏–π –∑–∞ —Ç–∏–ø–∞–º–∏"""
    user_id = update.effective_user.id
    
    if not restaurant_bot.restaurants_data:
        await update.message.reply_text("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    # –ì—Ä—É–ø—É—î–º–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∑–∞ —Ç–∏–ø–∞–º–∏
    grouped_restaurants = {}
    for restaurant in restaurant_bot.restaurants_data:
        establishment_type = restaurant.get('—Ç–∏–ø –∑–∞–∫–ª–∞–¥—É', restaurant.get('type', '–Ü–Ω—à–µ'))
        if not establishment_type or establishment_type.strip() == '':
            establishment_type = '–Ü–Ω—à–µ'
        
        if establishment_type not in grouped_restaurants:
            grouped_restaurants[establishment_type] = []
        
        grouped_restaurants[establishment_type].append(restaurant)
    
    # –§–æ—Ä–º—É—î–º–æ –∫—Ä–∞—Å–∏–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    message_parts = ["üè¢ <b>–í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –∑–∞ —Ç–∏–ø–∞–º–∏:</b>\n"]
    
    # –°–æ—Ä—Ç—É—î–º–æ —Ç–∏–ø–∏ –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –∑–∞–∫–ª–∞–¥—ñ–≤
    sorted_types = sorted(grouped_restaurants.items(), key=lambda x: len(x[1]), reverse=True)
    
    for establishment_type, restaurants in sorted_types:
        count = len(restaurants)
        
        # –Ü–∫–æ–Ω–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
        icon = {
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'üçΩÔ∏è',
            '–∫–∞–≤\'—è—Ä–Ω—è': '‚òï',
            '–∫–∞—Ñ–µ': '‚òï',
            '–¥–æ—Å—Ç–∞–≤–∫–∞': 'üöö',
            '–±–∞—Ä': 'üç∏'
        }.get(establishment_type.lower(), 'ü™ó')
        
        message_parts.append(f"\n{icon} <b>{establishment_type.upper()}</b> ({count})")
        
        # –î–æ–¥–∞—î–º–æ –ø–µ—Ä—à—ñ 3 —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
        for restaurant in restaurants[:3]:
            name = restaurant.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            message_parts.append(f"   ‚Ä¢ {name}")
        
        if count > 3:
            message_parts.append(f"   ‚Ä¢ ... —Ç–∞ —â–µ {count - 3}")
    
    total_count = len(restaurant_bot.restaurants_data)
    message_parts.append(f"\nüìä <b>–ó–∞–≥–∞–ª–æ–º:</b> {total_count} –∑–∞–∫–ª–∞–¥—ñ–≤")
    message_parts.append("üîç –î–ª—è –ø–æ—à—É–∫—É –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å —â–æ —à—É–∫–∞—î—Ç–µ!")
    
    full_message = '\n'.join(message_parts)
    
    await update.message.reply_text(full_message, parse_mode='HTML')
    logger.info(f"üìã –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.effective_user.id
    
    admin_ids = [980047923]
    
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    try:
        if not restaurant_bot.summary_sheet:
            await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        summary_data = restaurant_bot.summary_sheet.get_all_values()
        
        if len(summary_data) < 6:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: <b>{summary_data[1][1]}</b>
üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{summary_data[2][1]}</b>
‚≠ê –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: <b>{summary_data[3][1]}</b>
üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫: <b>{summary_data[4][1]}</b>

üïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {summary_data[1][2]}"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = update.effective_user.id
    
    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏")
        return
    
    user_text = update.message.text
    current_state = user_states[user_id]
    
    if current_state == "waiting_explanation":
        explanation = user_text
        rating_data = user_rating_data.get(user_id, {})
        
        if rating_data:
            await restaurant_bot.log_request(
                user_id, 
                rating_data['user_request'], 
                rating_data['restaurant_name'], 
                rating_data['rating'], 
                explanation
            )
            
            await update.message.reply_text(
                f"–î—è–∫—É—é –∑–∞ –¥–µ—Ç–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É! üôè\n\n"
                f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {rating_data['rating']}/10\n"
                f"–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.\n\n"
                f"–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –∑–Ω–∞–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω!"
            )
            
            user_states[user_id] = "completed"
            if user_id in user_last_recommendation:
                del user_last_recommendation[user_id]
            if user_id in user_rating_data:
                del user_rating_data[user_id]
            
            return
    
    if current_state == "waiting_rating" and user_text.isdigit():
        rating = int(user_text)
        if 1 <= rating <= 10:
            restaurant_name = user_last_recommendation.get(user_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            user_rating_data[user_id] = {
                'rating': rating,
                'restaurant_name': restaurant_name,
                'user_request': '–û—Ü—ñ–Ω–∫–∞'
            }
            
            user_states[user_id] = "waiting_explanation"
            
            await update.message.reply_text(
                f"–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É {rating}/10! ‚≠ê\n\n"
                f"ü§î <b>–ß–∏ –º–æ–∂–µ—à –ø–æ—è—Å–Ω–∏—Ç–∏ —á–æ–º—É —Ç–∞–∫–∞ –æ—Ü—ñ–Ω–∫–∞?</b>\n"
                f"–ù–∞–ø–∏—à–∏, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å –∞–±–æ –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å —É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.",
                parse_mode='HTML'
            )
            
            return
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10")
            return
    
    if current_state == "waiting_request":
        user_request = user_text
        logger.info(f"üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–ø–∏—Å–∞–≤: {user_request}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–æ–±–∫–∏
        processing_message = await update.message.reply_text("üîç –ê–Ω–∞–ª—ñ–∑—É—é –≤–∞—à –∑–∞–ø–∏—Ç...")
        
        recommendation = await restaurant_bot.get_recommendation(user_request)
        
        try:
            await processing_message.delete()
        except:
            pass
        
        if recommendation:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Å—Ç—Ä–∞–≤–∏
            if recommendation.get("dish_not_found"):
                not_found_message = f"""üòû <b>–°—Ç—Ä–∞–≤—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>

{recommendation['message']}

üí° <b>–ü–æ—Ä–∞–¥–∏:</b>
‚Ä¢ –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏: –ø—ñ—Ü–∞, —Å—É—à—ñ, –ø–∞—Å—Ç–∞, —Å–∞–ª–∞—Ç–∏
‚Ä¢ –ê–±–æ –æ–ø–∏—à—ñ—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É: "—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–µ –º—ñ—Å—Ü–µ", "–∫–∞–≤'—è—Ä–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏"
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ /list_restaurants –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤

–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –∞–±–æ /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É! üîÑ"""
                
                await update.message.reply_text(not_found_message, parse_mode='HTML')
                return
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            restaurants = recommendation["restaurants"]
            priority_index = recommendation["priority_index"]
            priority_explanation = recommendation["priority_explanation"]
            
            # –õ–æ–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω
            main_restaurant = restaurants[priority_index]
            await restaurant_bot.log_request(user_id, user_request, main_restaurant["name"])
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –æ—Ü—ñ–Ω–∫–∏
            user_last_recommendation[user_id] = main_restaurant["name"]
            user_states[user_id] = "waiting_rating"
            
            # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            if len(restaurants) == 1:
                response_text = f"""üéØ <b>–Ü–¥–µ–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –≤–∞—Å!</b>

üè† <b>{restaurants[0]['name']}</b>
üìç <i>{restaurants[0]['address']}</i>
üè¢ <b>–¢–∏–ø:</b> {restaurants[0]['type']}
‚ú® <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> {restaurants[0]['vibe']}
üéØ <b>–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:</b> {restaurants[0]['aim']}
üçΩÔ∏è <b>–ö—É—Ö–Ω—è:</b> {restaurants[0]['cuisine']}

üì± <b>–°–æ—Ü-–º–µ—Ä–µ–∂—ñ:</b> {restaurants[0]['socials']}"""
            else:
                priority_restaurant = restaurants[priority_index]
                alternative_restaurant = restaurants[1 - priority_index]
                
                response_text = f"""üéØ <b>–¢–æ–ø-2 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å:</b>

üèÜ <b>–ì–û–õ–û–í–ù–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–Ø:</b>
üè† <b>{priority_restaurant['name']}</b>
üìç <i>{priority_restaurant['address']}</i>
üè¢ <b>–¢–∏–ø:</b> {priority_restaurant['type']}
‚ú® <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> {priority_restaurant['vibe']}
üéØ <b>–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:</b> {priority_restaurant['aim']}
üçΩÔ∏è <b>–ö—É—Ö–Ω—è:</b> {priority_restaurant['cuisine']}
üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b> {priority_restaurant['socials']}

üí° <b>–ß–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—é:</b> <i>{priority_explanation}</i>

‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ

ü•à <b>–ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–ò–ô –í–ê–†–Ü–ê–ù–¢:</b>
üè† <b>{alternative_restaurant['name']}</b>
üìç <i>{alternative_restaurant['address']}</i>
üè¢ <b>–¢–∏–ø:</b> {alternative_restaurant['type']}
‚ú® <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> {alternative_restaurant['vibe']}
üéØ <b>–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è:</b> {alternative_restaurant['aim']}
üçΩÔ∏è <b>–ö—É—Ö–Ω—è:</b> {alternative_restaurant['cuisine']}
üì± <b>–ö–æ–Ω—Ç–∞–∫—Ç–∏:</b> {alternative_restaurant['socials']}"""

            # –î–æ–¥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ–Ω—é
            main_menu_url = main_restaurant.get('menu_url', '')
            if main_menu_url and main_menu_url.startswith('http'):
                response_text += f"\n\nüìã <a href='{main_menu_url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é –≥–æ–ª–æ–≤–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</a>"

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–æ—Ç–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            main_photo_url = main_restaurant.get('photo', '')
            
            if main_photo_url and main_photo_url.startswith('http'):
                try:
                    await update.message.reply_photo(
                        photo=main_photo_url,
                        caption=response_text,
                        parse_mode='HTML'
                    )
                except Exception as photo_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ: {photo_error}")
                    response_text += f"\n\nüì∏ <a href='{main_photo_url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–æ—Ç–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó</a>"
                    await update.message.reply_text(response_text, parse_mode='HTML')
            else:
                await update.message.reply_text(response_text, parse_mode='HTML')
            
            # –ü—Ä–æ—Å–∏–º–æ –æ—Ü—ñ–Ω–∏—Ç–∏
            rating_text = f"""‚≠ê <b>–û—Ü—ñ–Ω—ñ—Å—Ç—å –≥–æ–ª–æ–≤–Ω—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é</b>

üéØ <b>–û—Ü—ñ–Ω—é—î–º–æ:</b> "{main_restaurant['name']}"

<b>–®–∫–∞–ª–∞ –æ—Ü—ñ–Ω–∫–∏:</b>
1-3: –ó–æ–≤—Å—ñ–º –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
4-6: –ß–∞—Å—Ç–∫–æ–≤–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å  
7-8: –î–æ–±—Ä–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
9-10: –Ü–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å

<b>–ù–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10:</b> üëá

üí° <i>–í–∞—à—ñ –æ—Ü—ñ–Ω–∫–∏ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å –±–æ—Ç—É –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—Ç–∏ –≤–∞—à—ñ –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è!</i>"""
            await update.message.reply_text(rating_text, parse_mode='HTML')
            
        else:
            no_results_message = """üòû <b>–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ</b>

–ù–∞ –∂–∞–ª—å, –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∑–∞–∫–ª–∞–¥—ñ–≤ —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å –≤–∞—à–æ–º—É –∑–∞–ø–∏—Ç—É.

üí° <b>–°–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—ó –ø–æ—à—É–∫—É
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏  
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—ñ –∑–∞–∫–ª–∞–¥–∏: /list_restaurants
‚Ä¢ –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥–∏: /help

üîÑ <b>–ê–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç!</b>"""
            
            await update.message.reply_text(no_results_message, parse_mode='HTML')
    
    else:
        if current_state == "waiting_rating":
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Å—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 10")
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
        
    if not OPENAI_API_KEY:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
        
    if not GOOGLE_SHEET_URL:
        logger.error("‚ùå GOOGLE_SHEET_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π –±–æ—Ç–∞...")
    
    try:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("‚úÖ Telegram –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("list_restaurants", list_restaurants_command))
        application.add_handler(CommandHandler("stats", stats_command))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)
        
        logger.info("üîó –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ Google Sheets...")
        loop.run_until_complete(restaurant_bot.init_google_sheets())
        
        logger.info(f"üîß –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É: {ENHANCED_SEARCH_CONFIG}")
        if FUZZY_AVAILABLE:
            logger.info("‚úÖ Fuzzy matching –¥–æ—Å—Ç—É–ø–Ω–∏–π")
        else:
            logger.warning("‚ö†Ô∏è Fuzzy matching –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        logger.info("‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –±–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        loop.run_until_complete(application.run_polling(drop_pending_updates=True))
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç–∞ –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        try:
            loop.close()
        except:
            pass

if __name__ == '__main__':
    main()
