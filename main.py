import logging
import os
from typing import Dict, Optional
import asyncio
import json
import re
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è - –æ—Ç—Ä–∏–º—É—î–º–æ –∑ environment variables
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
GOOGLE_CREDENTIALS_JSON = os.getenv('GOOGLE_CREDENTIALS_JSON')
GOOGLE_SHEET_URL = os.getenv('GOOGLE_SHEET_URL')
ANALYTICS_SHEET_URL = os.getenv('ANALYTICS_SHEET_URL', GOOGLE_SHEET_URL)  # –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç—É –∂ —Ç–∞–±–ª–∏—Ü—é

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
openai_client = None
user_states: Dict[int, str] = {}
user_last_recommendation: Dict[int, str] = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –¥–ª—è –æ—Ü—ñ–Ω–∫–∏
user_rating_data: Dict[int, Dict] = {}  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏

class RestaurantBot:
    def __init__(self):
        self.restaurants_data = []
        self.google_sheets_available = False
        self.analytics_sheet = None
        self.gc = None
    
    def _convert_google_drive_url(self, url: str) -> str:
        """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤ –ø—Ä—è–º–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not url or 'drive.google.com' not in url:
            return url
        
        match = re.search(r'/file/d/([a-zA-Z0-9-_]+)', url)
        if match:
            file_id = match.group(1)
            direct_url = f"https://drive.google.com/uc?export=view&id={file_id}"
            logger.info(f"–ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url} ‚Üí {direct_url}")
            return direct_url
        
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ ID –∑ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {url}")
        return url
        
    async def init_google_sheets(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets"""
        if not GOOGLE_CREDENTIALS_JSON or not GOOGLE_SHEET_URL:
            logger.error("Google Sheets credentials –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
            return
            
        try:
            scope = [
                "https://www.googleapis.com/auth/spreadsheets",  # –ó–º—ñ–Ω–µ–Ω–æ –Ω–∞ –ø–æ–≤–Ω–∏–π –¥–æ—Å—Ç—É–ø
                "https://www.googleapis.com/auth/drive.readonly"
            ]
            
            credentials_dict = json.loads(GOOGLE_CREDENTIALS_JSON)
            creds = Credentials.from_service_account_info(credentials_dict, scopes=scope)
            
            self.gc = gspread.authorize(creds)
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤
            google_sheet = self.gc.open_by_url(GOOGLE_SHEET_URL)
            worksheet = google_sheet.sheet1
            
            records = worksheet.get_all_records()
            
            if records:
                self.restaurants_data = records
                self.google_sheets_available = True
                logger.info(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.restaurants_data)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ Google Sheets")
            else:
                logger.warning("Google Sheets –ø–æ—Ä–æ–∂–Ω—ñ–π")
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—É —Ç–∞–±–ª–∏—Ü—é
            await self.init_analytics_sheet()
                
        except Exception as e:
            logger.error(f"–î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ Google Sheets: {type(e).__name__}: {str(e)}")
    
    async def init_analytics_sheet(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        try:
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é (–º–æ–∂–µ –±—É—Ç–∏ —Ç–∞ –∂ —Å–∞–º–∞ –∞–±–æ –æ–∫—Ä–µ–º–∞)
            analytics_sheet = self.gc.open_by_url(ANALYTICS_SHEET_URL)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ª–∏—Å—Ç "analytics"
            try:
                self.analytics_sheet = analytics_sheet.worksheet("analytics")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç analytics")
            except gspread.WorksheetNotFound:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç
                self.analytics_sheet = analytics_sheet.add_worksheet(title="analytics", rows="1000", cols="12")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç analytics")
                
                # –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑ –Ω–æ–≤–æ—é –∫–æ–ª–æ–Ω–∫–æ—é –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
                headers = [
                    "Timestamp", "User ID", "User Request", "Restaurant Name", 
                    "Rating", "Rating Explanation", "Date", "Time"
                ]
                self.analytics_sheet.append_row(headers)
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ analytics")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –ª–∏—Å—Ç "Summary"
            try:
                self.summary_sheet = analytics_sheet.worksheet("Summary")
                logger.info("‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —ñ—Å–Ω—É—é—á–∏–π –ª–∏—Å—Ç Summary")
            except gspread.WorksheetNotFound:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –ª–∏—Å—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
                self.summary_sheet = analytics_sheet.add_worksheet(title="Summary", rows="100", cols="5")
                logger.info("‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –ª–∏—Å—Ç Summary")
                
                # –î–æ–¥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ
                summary_data = [
                    ["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è", "–û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"],
                    ["–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                    ["–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫", "0", datetime.now().strftime("%Y-%m-%d %H:%M:%S")]
                ]
                
                for row in summary_data:
                    self.summary_sheet.append_row(row)
                    
                logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ Summary")
                
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Analytics: {e}")
            self.analytics_sheet = None
    
    async def log_request(self, user_id: int, user_request: str, restaurant_name: str, rating: Optional[int] = None, explanation: str = ""):
        """–õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–æ—ó —Ç–∞–±–ª–∏—Ü—ñ"""
        if not self.analytics_sheet:
            logger.warning("Analytics sheet –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π")
            return
            
        try:
            now = datetime.now()
            timestamp = now.strftime("%Y-%m-%d %H:%M:%S")
            date = now.strftime("%Y-%m-%d")
            time = now.strftime("%H:%M:%S")
            
            row_data = [
                timestamp,
                str(user_id),
                user_request,
                restaurant_name,
                str(rating) if rating else "",
                explanation,  # –î–æ–¥–∞—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
                date,
                time
            ]
            
            self.analytics_sheet.append_row(row_data)
            logger.info(f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ –¥–æ Analytics: {user_id} - {restaurant_name} - –û—Ü—ñ–Ω–∫–∞: {rating} - –ü–æ—è—Å–Ω–µ–Ω–Ω—è: {explanation[:50]}...")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await self.update_summary_stats()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è: {e}")
    
    async def update_summary_stats(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤–µ–¥–µ–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.analytics_sheet or not self.summary_sheet:
            return
            
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –∑ Analytics
            all_records = self.analytics_sheet.get_all_records()
            
            if not all_records:
                return
            
            # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_requests = len(all_records)
            unique_users = len(set(record['User ID'] for record in all_records))
            
            # –†–∞—Ö—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—é –æ—Ü—ñ–Ω–∫—É (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–ø–∏—Å—ñ–≤ –∑ –æ—Ü—ñ–Ω–∫–∞–º–∏)
            ratings = [int(record['Rating']) for record in all_records if record['Rating'] and str(record['Rating']).isdigit()]
            avg_rating = sum(ratings) / len(ratings) if ratings else 0
            rating_count = len(ratings)
            
            # –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            avg_requests_per_user = total_requests / unique_users if unique_users > 0 else 0
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # –û–Ω–æ–≤–ª—é—î–º–æ Summary –ª–∏—Å—Ç
            self.summary_sheet.update('B2', str(total_requests))
            self.summary_sheet.update('C2', timestamp)
            
            self.summary_sheet.update('B3', str(unique_users))
            self.summary_sheet.update('C3', timestamp)
            
            self.summary_sheet.update('B4', f"{avg_rating:.2f}")
            self.summary_sheet.update('C4', timestamp)
            
            self.summary_sheet.update('B5', str(rating_count))
            self.summary_sheet.update('C5', timestamp)
            
            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –º–µ—Ç—Ä–∏–∫—É
            try:
                self.summary_sheet.update('A6', "–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")
                self.summary_sheet.update('B6', f"{avg_requests_per_user:.2f}")
                self.summary_sheet.update('C6', timestamp)
            except:
                # –Ø–∫—â–æ —Ä—è–¥–æ–∫ –Ω–µ —ñ—Å–Ω—É—î, –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ
                self.summary_sheet.append_row(["–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", f"{avg_requests_per_user:.2f}", timestamp])
            
            logger.info(f"üìà –û–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: –ó–∞–ø–∏—Ç—ñ–≤: {total_requests}, –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {unique_users}, –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞: {avg_rating:.2f}")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def get_recommendation(self, user_request: str) -> Optional[Dict]:
        """–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —á–µ—Ä–µ–∑ OpenAI –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–µ–Ω—é"""
        try:
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ OpenAI –∫–ª—ñ—î–Ω—Ç
            global openai_client
            if openai_client is None:
                import openai
                openai.api_key = OPENAI_API_KEY
                openai_client = openai
                logger.info("‚úÖ OpenAI –∫–ª—ñ—î–Ω—Ç —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            if not self.restaurants_data:
                logger.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
                return None
            
            # –†–∞–Ω–¥–æ–º—ñ–∑—É—î–º–æ –ø–æ—Ä—è–¥–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            import random
            shuffled_restaurants = self.restaurants_data.copy()
            random.shuffle(shuffled_restaurants)
            
            logger.info(f"üé≤ –ü–µ—Ä–µ–º—ñ—à–∞–≤ –ø–æ—Ä—è–¥–æ–∫ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ–≤ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ")
            
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ –º–µ–Ω—é (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É)
            filtered_restaurants = self._filter_by_menu(user_request, shuffled_restaurants)
            
            # –ì–æ—Ç—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è OpenAI
            restaurants_details = []
            for i, r in enumerate(filtered_restaurants):
                detail = f"""–í–∞—Ä—ñ–∞–Ω—Ç {i+1}:
- –ù–∞–∑–≤–∞: {r.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')}
- –ö—É—Ö–Ω—è: {r.get('cuisine', '–ù–µ –≤–∫–∞–∑–∞–Ω–∞')}
- –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞: {r.get('vibe', '–ù–µ –æ–ø–∏—Å–∞–Ω–∞')}
- –ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è: {r.get('aim', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}"""
                restaurants_details.append(detail)
            
            restaurants_text = "\n\n".join(restaurants_details)
            
            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            examples = [
                "–Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ —Ä–æ–º–∞–Ω—Ç–∏–∫—É ‚Üí –æ–±–∏—Ä–∞–π —ñ–Ω—Ç–∏–º–Ω—É –∞—Ç–º–æ—Å—Ñ–µ—Ä—É",
                "–Ø–∫—â–æ –∑–≥–∞–¥–∞–Ω—ñ –¥—ñ—Ç–∏/—Å—ñ–º'—è ‚Üí –æ–±–∏—Ä–∞–π —Å—ñ–º–µ–π–Ω—ñ –∑–∞–∫–ª–∞–¥–∏", 
                "–Ø–∫—â–æ —à–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∫—É—Å ‚Üí –æ–±–∏—Ä–∞–π casual —Ñ–æ—Ä–º–∞—Ç",
                "–Ø–∫—â–æ –æ—Å–æ–±–ª–∏–≤–∞ –∫—É—Ö–Ω—è ‚Üí –≤—Ä–∞—Ö–æ–≤—É–π —Ç–∏–ø –∫—É—Ö–Ω—ñ",
                "–Ø–∫—â–æ —Å–≤—è—Ç–∫—É–≤–∞–Ω–Ω—è ‚Üí –æ–±–∏—Ä–∞–π –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ñ –∑–∞–∫–ª–∞–¥–∏"
            ]
            random.shuffle(examples)
            selected_examples = examples[:2]
            
            prompt = f"""–ó–ê–ü–ò–¢ –ö–û–†–ò–°–¢–£–í–ê–ß–ê: "{user_request}"

–í–ê–ñ–õ–ò–í–û: –í—Å—ñ –∑–∞–∫–ª–∞–¥–∏ –Ω–∏–∂—á–µ –£–ñ–ï –í–Ü–î–§–Ü–õ–¨–¢–†–û–í–ê–ù–Ü —ñ –ø—ñ–¥—Ö–æ–¥—è—Ç—å –ø—ñ–¥ –∑–∞–ø–∏—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.

–í–ê–†–Ü–ê–ù–¢–ò –ó–ê–ö–õ–ê–î–Ü–í:
{restaurants_text}

–Ü–ù–°–¢–†–£–ö–¶–Ü–á:
- –û–±–µ—Ä–∏ –¢–Ü–õ–¨–ö–ò –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç—É (—á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ {len(filtered_restaurants)})
- –ù–ï –ø–æ—è—Å–Ω—é–π —Å–≤—ñ–π –≤–∏–±—ñ—Ä
- –ù–ï –¥–æ–¥–∞–≤–∞–π –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –ø—Ä–æ –∫—É—Ö–Ω—é —á–∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É
- –ü—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä–Ω–∏ –Ω–æ–º–µ—Ä: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "3"

–ù–æ–º–µ—Ä –æ–±—Ä–∞–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç—É:"""

            logger.info(f"ü§ñ –ù–∞–¥—Å–∏–ª–∞—é –∑–∞–ø–∏—Ç –¥–æ OpenAI –∑ {len(filtered_restaurants)} –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏...")
            logger.info(f"üîç –ü–µ—Ä—à—ñ 3 –≤–∞—Ä—ñ–∞–Ω—Ç–∏: {[r.get('name') for r in filtered_restaurants[:3]]}")
            
            def make_openai_request():
                return openai_client.ChatCompletion.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-—Ä–µ—Å—Ç–æ—Ä–∞—Ç–æ—Ä. –û–±–∏—Ä–∞–π –≤–∞—Ä—ñ–∞–Ω—Ç–∏ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ, –Ω–µ –∑–∞—Ü–∏–∫–ª—é–π –Ω–∞ –æ–¥–Ω–æ–º—É –∑–∞–∫–ª–∞–¥—ñ."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=200,
                    temperature=0.4,
                    top_p=0.9
                )
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –∑ timeout
            response = await asyncio.wait_for(
                asyncio.to_thread(make_openai_request),
                timeout=20
            )
            
            choice_text = response.choices[0].message.content.strip()
            logger.info(f"ü§ñ OpenAI –ø–æ–≤–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: '{choice_text}'")
            
            # –ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ - —à—É–∫–∞—î–º–æ –ø–µ—Ä—à–µ —á–∏—Å–ª–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            numbers = re.findall(r'\d+', choice_text)
            
            if numbers:
                choice_num = int(numbers[0]) - 1
                logger.info(f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {numbers[0]} ‚Üí —ñ–Ω–¥–µ–∫—Å {choice_num}")
                
                if 0 <= choice_num < len(filtered_restaurants):
                    chosen_restaurant = filtered_restaurants[choice_num]
                    logger.info(f"‚úÖ OpenAI –æ–±—Ä–∞–≤: {chosen_restaurant.get('name', '')} (–≤–∞—Ä—ñ–∞–Ω—Ç {choice_num + 1} –∑ {len(filtered_restaurants)})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ß–∏—Å–ª–æ {choice_num + 1} –ø–æ–∑–∞ –º–µ–∂–∞–º–∏, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                    chosen_restaurant = self._smart_fallback_selection(user_request, filtered_restaurants)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª –≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
                chosen_restaurant = self._smart_fallback_selection(user_request, filtered_restaurants)
            
            # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ
            photo_url = chosen_restaurant.get('photo', '')
            if photo_url:
                photo_url = self._convert_google_drive_url(photo_url)
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                "name": chosen_restaurant.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
                "address": chosen_restaurant.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
                "socials": chosen_restaurant.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
                "vibe": chosen_restaurant.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
                "aim": chosen_restaurant.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
                "cuisine": chosen_restaurant.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
                "menu": chosen_restaurant.get('menu', ''),
                "menu_url": chosen_restaurant.get('menu_url', ''),
                "photo": photo_url
            }
            
        except asyncio.TimeoutError:
            logger.error("‚è∞ Timeout –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ OpenAI, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º")
            return self._fallback_selection_dict(user_request)
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó: {e}")
            return self._fallback_selection_dict(user_request)

    def _filter_by_menu(self, user_request: str, restaurant_list):
        """–§—ñ–ª—å—Ç—Ä—É—î —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –ø–æ –º–µ–Ω—é (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É)"""
        user_lower = user_request.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö —Å—Ç—Ä–∞–≤
        food_keywords = {
            '–ø—ñ—Ü–∞': [' –ø—ñ—Ü', 'pizza', '–ø—ñ—Ü–∞'],
            '–ø–∞—Å—Ç–∞': [' –ø–∞—Å—Ç', '—Å–ø–∞–≥–µ—Ç—ñ', 'pasta'],
            '–±—É—Ä–≥–µ—Ä': ['–±—É—Ä–≥–µ—Ä', 'burger', '–≥–∞–º–±—É—Ä–≥–µ—Ä'],
            '—Å—É—à—ñ': [' —Å—É—à—ñ', 'sushi', ' —Ä–æ–ª', '—Ä–æ–ª–ª', '—Å–∞—à—ñ–º—ñ'],
            '—Å–∞–ª–∞—Ç': [' —Å–∞–ª–∞—Ç', 'salad'],
            '—Ö—É–º—É—Å': ['—Ö—É–º—É—Å', 'hummus'],
            '—Ñ–∞–ª–∞—Ñ–µ–ª—å': ['—Ñ–∞–ª–∞—Ñ–µ–ª—å', 'falafel'],
            '—à–∞—É—Ä–º–∞': ['—à–∞—É—Ä–º', 'shawarma'],
            '—Å—Ç–µ–π–∫': ['—Å—Ç–µ–π–∫', 'steak', ' –º—è—Å–æ'],
            '—Ä–∏–±–∞': [' —Ä–∏–±', 'fish', '–ª–æ—Å–æ—Å—å'],
            '–∫—É—Ä–∫–∞': [' –∫—É—Ä–∫', '–∫—É—Ä–∏—á', 'chicken'],
            '–¥–µ—Å–µ—Ä—Ç': ['–¥–µ—Å–µ—Ä—Ç', '—Ç–æ—Ä—Ç', '—Ç—ñ—Ä–∞–º—ñ—Å—É', '–º–æ—Ä–æ–∑–∏–≤–æ']
        }
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É
        requested_dishes = []
        for dish, keywords in food_keywords.items():
            if any(keyword in user_lower for keyword in keywords):
                requested_dishes.append(dish)
        
        if requested_dishes:
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –¥–µ —î –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Å—Ç—Ä–∞–≤–∏
            filtered_restaurants = []
            logger.info(f"üçΩ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Å—Ç—Ä–∞–≤–∏: {requested_dishes}")
            
            for restaurant in restaurant_list:
                menu_text = restaurant.get('menu', '').lower()
                has_requested_dish = False
                
                for dish in requested_dishes:
                    dish_keywords = food_keywords[dish]
                    if any(keyword in menu_text for keyword in dish_keywords):
                        has_requested_dish = True
                        logger.info(f"   ‚úÖ {restaurant.get('name', '')} –º–∞—î {dish}")
                        break
                
                if has_requested_dish:
                    filtered_restaurants.append(restaurant)
                else:
                    logger.info(f"   ‚ùå {restaurant.get('name', '')} –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç—Ä–∞–≤")
            
            if filtered_restaurants:
                logger.info(f"üìã –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –¥–æ {len(filtered_restaurants)} –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏")
                return filtered_restaurants
            else:
                logger.warning("‚ö†Ô∏è –ñ–æ–¥–µ–Ω –∑–∞–∫–ª–∞–¥ –Ω–µ –º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Å—Ç—Ä–∞–≤, –ø–æ–∫–∞–∑—É—é –≤—Å—ñ")
                return restaurant_list
        else:
            # –Ø–∫—â–æ –Ω–µ —à—É–∫–∞—î –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏
            logger.info("üîç –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç, –∞–Ω–∞–ª—ñ–∑—É—é –≤—Å—ñ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏")
            return restaurant_list

    def _smart_fallback_selection(self, user_request: str, restaurant_list):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑ —Ä–∞–Ω–¥–æ–º—ñ–∑–∞—Ü—ñ—î—é"""
        import random
        
        user_lower = user_request.lower()
        
        # –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
        keywords_map = {
            'romantic': (['—Ä–æ–º–∞–Ω—Ç', '–ø–æ–±–∞—á–µ–Ω', '–¥–≤–æ—Ö', '—ñ–Ω—Ç–∏–º–Ω', '–∑–∞—Ç–∏—à–Ω'], ['—ñ–Ω—Ç–∏–º–Ω', '—Ä–æ–º–∞–Ω—Ç', '–¥–ª—è –ø–∞—Ä', '–∑–∞—Ç–∏—à–Ω']),
            'family': (['—Å—ñ–º', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω', '–±–∞—Ç—å–∫'], ['—Å—ñ–º–µ–π–Ω', '–¥—ñ—Ç', '—Ä–æ–¥–∏–Ω']),
            'business': (['–¥—ñ–ª', '–∑—É—Å—Ç—Ä—ñ—á', '–ø–µ—Ä–µ–≥–æ–≤', '–±—ñ–∑–Ω–µ—Å'], ['–¥—ñ–ª', '–∑—É—Å—Ç—Ä—ñ—á', '–±—ñ–∑–Ω–µ—Å']),
            'friends': (['–¥—Ä—É–∑', '–∫–æ–º–ø–∞–Ω', '–≥—É—Ä—Ç–æ–º', '–≤–µ—Å–µ–ª'], ['–∫–æ–º–ø–∞–Ω', '–¥—Ä—É–∑', '–º–æ–ª–æ–¥—ñ–∂–Ω']),
            'quick': (['—à–≤–∏–¥–∫', '–ø–µ—Ä–µ–∫—É—Å', '—Ñ–∞—Å—Ç', '–ø–æ—Å–ø—ñ—à–∞'], ['—à–≤–∏–¥–∫', 'casual', '—Ñ–∞—Å—Ç']),
            'celebration': (['—Å–≤—è—Ç–∫—É–≤', '–¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂', '—é–≤—ñ–ª–µ', '—Å–≤—è—Ç–æ'], ['—Å–≤—è—Ç–∫–æ–≤', '–ø—Ä–æ—Å—Ç–æ—Ä', '–≥—Ä—É–ø'])
        }
        
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ –æ—á–∫–∏
        scored_restaurants = []
        for restaurant in restaurant_list:
            score = 0
            restaurant_text = f"{restaurant.get('vibe', '')} {restaurant.get('aim', '')} {restaurant.get('cuisine', '')}".lower()
            
            # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å
            for category, (user_keywords, restaurant_keywords) in keywords_map.items():
                user_match = any(keyword in user_lower for keyword in user_keywords)
                if user_match:
                    restaurant_match = any(keyword in restaurant_text for keyword in restaurant_keywords)
                    if restaurant_match:
                        score += 5
                    
            # –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –±–æ–Ω—É—Å –¥–ª—è —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
            score += random.uniform(0, 2)
            
            scored_restaurants.append((score, restaurant))
        
        # –°–æ—Ä—Ç—É—î–º–æ, –∞–ª–µ –±–µ—Ä–µ–º–æ –∑ –¢–û–ü-3 –≤–∏–ø–∞–¥–∫–æ–≤–æ
        scored_restaurants.sort(key=lambda x: x[0], reverse=True)
        
        if scored_restaurants[0][0] > 0:
            # –Ø–∫—â–æ —î —Ö–æ—Ä–æ—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏, –±–µ—Ä–µ–º–æ –æ–¥–∏–Ω –∑ —Ç–æ–ø-3 –≤–∏–ø–∞–¥–∫–æ–≤–æ
            top_candidates = scored_restaurants[:min(3, len(scored_restaurants))]
            chosen = random.choice(top_candidates)[1]
            logger.info(f"üéØ –†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞–≤: {chosen.get('name', '')} (–≤–∏–ø–∞–¥–∫–æ–≤–æ –∑ –¢–û–ü-3)")
            return chosen
        else:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î —è–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤, –±–µ—Ä–µ–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π
            chosen = random.choice(restaurant_list)
            logger.info(f"üé≤ –†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –≤–∏–±—ñ—Ä - {chosen.get('name', '')}")
            return chosen

    def _fallback_selection_dict(self, user_request: str):
        """–†–µ–∑–µ—Ä–≤–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ª–æ–≤–Ω–∏–∫"""
        if not self.restaurants_data:
            logger.error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏ –¥–ª—è fallback")
            return {
                "name": "–†–µ—Å—Ç–æ—Ä–∞–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π",
                "address": "–°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ",
                "socials": "",
                "vibe": "",
                "aim": "",
                "cuisine": "",
                "menu": "",
                "menu_url": "",
                "photo": ""
            }
            
        chosen = self._smart_fallback_selection(user_request, self.restaurants_data)
        
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ Google Drive –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ
        photo_url = chosen.get('photo', '')
        if photo_url:
            photo_url = self._convert_google_drive_url(photo_url)
        
        return {
            "name": chosen.get('name', '–†–µ—Å—Ç–æ—Ä–∞–Ω'),
            "address": chosen.get('address', '–ê–¥—Ä–µ—Å–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'),
            "socials": chosen.get('socials', '–°–æ—Ü-–º–µ—Ä–µ–∂—ñ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ'),
            "vibe": chosen.get('vibe', '–ü—Ä–∏—î–º–Ω–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'),
            "aim": chosen.get('aim', '–î–ª—è –±—É–¥—å-—è–∫–∏—Ö –ø–æ–¥—ñ–π'),
            "cuisine": chosen.get('cuisine', '–°–º–∞—á–Ω–∞ –∫—É—Ö–Ω—è'),
            "menu": chosen.get('menu', ''),
            "menu_url": chosen.get('menu_url', ''),
            "photo": photo_url
        }

restaurant_bot = RestaurantBot()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user_id = update.effective_user.id
    user_states[user_id] = "waiting_request"
    
    message = (
        "üçΩ –ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω!\n\n"
        "–†–æ–∑–∫–∞–∂–∏ –º–µ–Ω—ñ –ø—Ä–æ —Å–≤–æ—î –ø–æ–±–∞–∂–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ '–•–æ—á—É –º—ñ—Å—Ü–µ –¥–ª—è –æ–±—ñ–¥—É –∑ —Å—ñ–º'—î—é'\n"
        "‚Ä¢ '–ü–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –ø–æ–±–∞—á–µ–Ω–Ω—è'\n"
        "‚Ä¢ '–®—É–∫–∞—é –ø—ñ—Ü—É –∑ –¥—Ä—É–∑—è–º–∏'\n\n"
        "–ù–∞–ø–∏—à–∏, —â–æ —Ç–∏ —à—É–∫–∞—î—à! üòä"
    )
    
    await update.message.reply_text(message)
    logger.info(f"‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ –¥—ñ–∞–ª–æ–≥")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    user_id = update.effective_user.id
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ /start, –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏
    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏")
        return
    
    user_text = update.message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    current_state = user_states[user_id]
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
    if current_state == "waiting_explanation":
        explanation = user_text
        rating_data = user_rating_data.get(user_id, {})
        
        if rating_data:
            # –õ–æ–≥—É—î–º–æ –ø–æ–≤–Ω–∏–π –∑–∞–ø–∏—Å –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º
            await restaurant_bot.log_request(
                user_id, 
                rating_data['user_request'], 
                rating_data['restaurant_name'], 
                rating_data['rating'], 
                explanation
            )
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
            await update.message.reply_text(
                f"–î—è–∫—É—é –∑–∞ –¥–µ—Ç–∞–ª—å–Ω—É –æ—Ü—ñ–Ω–∫—É! üôè\n\n"
                f"–í–∞—à–∞ –æ—Ü—ñ–Ω–∫–∞: {rating_data['rating']}/10\n"
                f"–ü–æ—è—Å–Ω–µ–Ω–Ω—è –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.\n\n"
                f"–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –∑–Ω–∞–π—Ç–∏ —â–µ –æ–¥–∏–Ω —Ä–µ—Å—Ç–æ—Ä–∞–Ω!"
            )
            
            # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            user_states[user_id] = "completed"
            if user_id in user_last_recommendation:
                del user_last_recommendation[user_id]
            if user_id in user_rating_data:
                del user_rating_data[user_id]
            
            logger.info(f"üí¨ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–¥–∞–≤ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏: {explanation[:100]}...")
            return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –æ—Ü—ñ–Ω–∫–∞ (—á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10)
    if current_state == "waiting_rating" and user_text.isdigit():
        rating = int(user_text)
        if 1 <= rating <= 10:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
            restaurant_name = user_last_recommendation.get(user_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω")
            user_rating_data[user_id] = {
                'rating': rating,
                'restaurant_name': restaurant_name,
                'user_request': '–û—Ü—ñ–Ω–∫–∞'  # –ú–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            }
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è—Å–Ω–µ–Ω–Ω—è
            user_states[user_id] = "waiting_explanation"
            
            # –ù–û–í–ê –§–£–ù–ö–¶–Ü–Ø: –ó–∞–ø–∏—Ç—É—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –æ—Ü—ñ–Ω–∫–∏
            await update.message.reply_text(
                f"–î—è–∫—É—é –∑–∞ –æ—Ü—ñ–Ω–∫—É {rating}/10! ‚≠ê\n\n"
                f"ü§î <b>–ß–∏ –º–æ–∂–µ—à –ø–æ—è—Å–Ω–∏—Ç–∏ —á–æ–º—É —Ç–∞–∫–∞ –æ—Ü—ñ–Ω–∫–∞?</b>\n"
                f"–ù–∞–ø–∏—à–∏, —â–æ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å –∞–±–æ –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å —É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.",
                parse_mode='HTML'
            )
            
            logger.info(f"‚≠ê –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ü—ñ–Ω–∏–≤ {restaurant_name} –Ω–∞ {rating}/10, –æ—á—ñ–∫—É—î–º–æ –ø–æ—è—Å–Ω–µ–Ω–Ω—è")
            return
        else:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10")
            return
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –∑–≤–∏—á–∞–π–Ω–∏–π –∑–∞–ø–∏—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É
    if current_state == "waiting_request":
        user_request = user_text
        logger.info(f"üîç –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–ø–∏—Å–∞–≤: {user_request}")
        
        # –ü–æ–∫–∞–∑—É—î–º–æ, —â–æ —à—É–∫–∞—î–º–æ
        processing_message = await update.message.reply_text("üîç –®—É–∫–∞—é —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –≤–∞—Å...")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é
        recommendation = await restaurant_bot.get_recommendation(user_request)
        
        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è "—à—É–∫–∞—é"
        try:
            await processing_message.delete()
        except:
            pass
        
        if recommendation:
            restaurant_name = recommendation['name']
            
            # –õ–æ–≥—É—î–º–æ –∑–∞–ø–∏—Ç –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–±–µ–∑ –æ—Ü—ñ–Ω–∫–∏ –ø–æ–∫–∏ —â–æ)
            await restaurant_bot.log_request(user_id, user_request, restaurant_name)
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –¥–ª—è –º–∞–π–±—É—Ç–Ω—å–æ—ó –æ—Ü—ñ–Ω–∫–∏
            user_last_recommendation[user_id] = restaurant_name
            user_states[user_id] = "waiting_rating"
            
            # –ì–æ—Ç—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
            response_text = f"""üè† <b>{recommendation['name']}</b>

üìç <b>–ê–¥—Ä–µ—Å–∞:</b> {recommendation['address']}

üì± <b>–°–æ—Ü-–º–µ—Ä–µ–∂—ñ:</b> {recommendation['socials']}

‚ú® <b>–ê—Ç–º–æ—Å—Ñ–µ—Ä–∞:</b> {recommendation['vibe']}"""

            # –î–æ–¥–∞—î–º–æ –¢–Ü–õ–¨–ö–ò –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –º–µ–Ω—é (–±–µ–∑ —Ç–µ–∫—Å—Ç—É –º–µ–Ω—é)
            menu_url = recommendation.get('menu_url', '')
            if menu_url and menu_url.startswith('http'):
                response_text += f"\n\nüìã <a href='{menu_url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–µ–Ω—é</a>"

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ñ–æ—Ç–æ
            photo_url = recommendation.get('photo', '')
            
            if photo_url and photo_url.startswith('http'):
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ —è–∫ –º–µ–¥—ñ–∞—Ñ–∞–π–ª –∑ –ø—ñ–¥–ø–∏—Å–æ–º
                try:
                    logger.info(f"üì∏ –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ: {photo_url}")
                    await update.message.reply_photo(
                        photo=photo_url,
                        caption=response_text,
                        parse_mode='HTML'
                    )
                    logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –∑ —Ñ–æ—Ç–æ: {recommendation['name']}")
                except Exception as photo_error:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ: {photo_error}")
                    logger.warning(f"üì∏ –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ñ–æ—Ç–æ: {photo_url}")
                    # –Ø–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç –±–µ–∑ —Ñ–æ—Ç–æ
                    response_text += f"\n\nüì∏ <a href='{photo_url}'>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ñ–æ—Ç–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É</a>"
                    await update.message.reply_text(response_text, parse_mode='HTML')
                    logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ —Ñ–æ—Ç–æ: {recommendation['name']}")
            else:
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç–µ–∫—Å—Ç —è–∫—â–æ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î
                await update.message.reply_text(response_text, parse_mode='HTML')
                logger.info(f"‚úÖ –ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é: {recommendation['name']}")
            
            # –ü—Ä–æ—Å–∏–º–æ –æ—Ü—ñ–Ω–∏—Ç–∏
            rating_text = (
                "‚≠ê <b>–û—Ü—ñ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –∑–∞–∫–ª–∞–¥—É –≤—ñ–¥ 1 –¥–æ 10</b>\n"
                "(–Ω–∞–ø–∏—à–∏ —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç—ñ)\n\n"
                "1 - –∑–æ–≤—Å—ñ–º –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å\n"
                "10 - —ñ–¥–µ–∞–ª—å–Ω–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"
            )
            await update.message.reply_text(rating_text, parse_mode='HTML')
            
        else:
            await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, –Ω–µ –∑–Ω–∞–π—à–æ–≤ –∑–∞–∫–ª–∞–¥—ñ–≤ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–∏–º–∏ —Å—Ç—Ä–∞–≤–∞–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –≤–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Å—Ç—Ä–∞–≤—É.")
            logger.warning(f"‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    
    else:
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤ —â–æ—Å—å —ñ–Ω—à–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Å—Ç–∞–Ω—ñ
        if current_state == "waiting_rating":
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—Ü—ñ–Ω—ñ—Ç—å –ø–æ–ø–µ—Ä–µ–¥–Ω—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—é —á–∏—Å–ª–æ–º –≤—ñ–¥ 1 –¥–æ 10")
        elif current_state == "waiting_explanation":
            # –¶–µ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ
            pass
        else:
            await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)"""
    user_id = update.effective_user.id
    
    # –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ (–¥–æ–¥–∞–π—Ç–µ —Å–≤—ñ–π user_id)
    admin_ids = [980047923]  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–≤—ñ–π Telegram user_id
    
    if user_id not in admin_ids:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        return
    
    try:
        if not restaurant_bot.summary_sheet:
            await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∑—ñ Summary –ª–∏—Å—Ç–∞
        summary_data = restaurant_bot.summary_sheet.get_all_values()
        
        if len(summary_data) < 6:
            await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            return
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
        stats_text = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>

üìà –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: <b>{summary_data[1][1]}</b>
üë• –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: <b>{summary_data[2][1]}</b>
‚≠ê –°–µ—Ä–µ–¥–Ω—è –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ: <b>{summary_data[3][1]}</b>
üî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ü—ñ–Ω–æ–∫: <b>{summary_data[4][1]}</b>
üìä –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: <b>{summary_data[5][1]}</b>

üïê –û—Å—Ç–∞–Ω–Ω—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {summary_data[1][2]}"""
        
        await update.message.reply_text(stats_text, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
        
    if not OPENAI_API_KEY:
        logger.error("‚ùå OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
        
    if not GOOGLE_SHEET_URL:
        logger.error("‚ùå GOOGLE_SHEET_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!")
        return
    
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –æ–Ω–æ–≤–ª–µ–Ω–∏–π –±–æ—Ç–∞...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event loop –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫—É
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("‚úÖ Telegram –¥–æ–¥–∞—Ç–æ–∫ —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_error_handler(error_handler)
        
        logger.info("üîó –ü—ñ–¥–∫–ª—é—á–∞—é—Å—è –¥–æ Google Sheets...")
        loop.run_until_complete(restaurant_bot.init_google_sheets())
        
        logger.info("‚úÖ –í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ë–æ—Ç –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ polling
        loop.run_until_complete(application.run_polling(drop_pending_updates=True))
        
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        try:
            loop.close()
        except:
            pass

if __name__ == '__main__':
    main()
